/**
 * @file allocated_block.h
 * @brief Заголовочный файл для работы с блоками выделенной памяти.
 *
 * Данный файл содержит определение структуры `ae_allocated_block`
 * и функции для управления блоками динамически выделенной памяти.
 *
 * Основной функционал включает в себя:
 * - Хранение информации о выделенном блоке памяти
 * - Управление размером блока памяти
 * - Отслеживание размера отдельных элементов в блоке
 *
 * @note Все операции с блоками памяти должны выполняться с учетом
 *       размера элементов и общего количества элементов в блоке.
 *
 * @warning При работе с функциями необходимо убедиться, что размер
 *          элемента не равен нулю и указатели корректны, чтобы
 *          избежать ошибок времени выполнения.
 *
 * @see ae_allocated_block
 * @see ae_allocated_block_resize
 */

#ifndef AE_ALLOCATED_BLOCK_H
#define AE_ALLOCATED_BLOCK_H

#include "memory_block.h"

/**
 * @typedef ae_allocated_block_t
 * @brief Тип, представляющий блок выделенной памяти.
 *
 * Этот тип является псевдонимом для структуры `ae_memory_block_t`.
 * Он используется для представления блока памяти,
 * который включает в себя диапазон памяти и размер каждого элемента в этом блоке.
 *
 * Тип `ae_allocated_block_t` эквивалентен типу `ae_memory_block_t`,
 * который содержит:
 *
 * - Диапазон памяти, представленный как `ae_memory_range_t`.
 * - Размер одного элемента в блоке памяти, представленный как `ae_usize_t`.
 *
 * Использование этого псевдонима позволяет лучше выразить намерения кода,
 * когда требуется работать с выделенной памятью, а не с обычным диапазоном памяти.
 *
 * @see ae_memory_block_t
 */
typedef ae_memory_block_t ae_allocated_block_t;

AE_COMPILER(EXTERN_C_BEGIN)

/**
 * @brief Обменивает содержимое двух выделенных блоков памяти.
 *
 * Эта функция обменивает содержимое двух выделенных блоков памяти,
 * представленных указателями на структуры типа `ae_allocated_block_t`.
 *
 * @param[in,out] self Указатель на первый блок памяти,
 *                     содержимое которого будет обменяно.
 * @param[in,out] other Указатель на второй блок памяти,
 *                      содержимое которого будет обменяно.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если указатель на `self` или `other` равен `nullptr`.
 * @throw AE_RUNTIME_ERROR_DIFFERENT_ELEMENT_SIZE
 *        Если размер элементов в блоках памяти различается.
 * @throw AE_RUNTIME_ERROR_DEALLOCATOR_FUNCTION_NOT_INITIALIZED
 *        Если функция освобождения памяти не инициализирована.
 */
AE_ATTRIBUTE(SYMBOL)
void
ae_allocated_block_exchange(void *self, void *other);

/**
 * @brief Вычисляет максимальный размер блока, который может быть выделен.
 *
 * Эта функция вычисляет максимальный размер блока памяти,
 * который может быть выделен для заданного объекта типа `ae_allocated_block_t`,
 * исходя из размера элемента, на основе ограничения размера памяти в системе.
 *
 * Если указатель на блок или его размер элемента равен нулю,
 * генерируется ошибка времени выполнения.
 *
 * @param self Указатель на объект типа `ae_allocated_block_t`,
 *             для которого нужно вычислить максимальный размер блока.
 *
 * @return Возвращает максимальный размер блока в единицах типа `ae_usize_t`.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если указатель на объект `self` равен `null`.
 * @throw AE_RUNTIME_ERROR_ZERO_ELEMENT_SIZE
 *        Если размер элемента равен нулю.
 */
AE_ATTRIBUTE(SYMBOL)
ae_usize_t
ae_allocated_block_max_size(const void *self);

/**
 * @brief Проверяет, превышает ли размер блока
 *        для заданного количества элементов максимальный допустимый размер.
 *
 * Эта функция проверяет, если размер блока для заданного количества элементов превышает
 * максимально допустимый размер для блока, вычисленный с использованием функции
 * `ae_allocated_block_max_size`.
 *
 * Если количество элементов превышает максимальный размер,
 * будет сгенерирована ошибка, и выполнение прервется.
 *
 * @param self Указатель на объект типа `ae_allocated_block_t`,
 *             который содержит информацию о размере элемента.
 * @param number_of_elements Количество элементов,
 *                           для которых необходимо проверить размер блока.
 *
 * @return Возвращает `true`, если размер блока для заданного количества элементов
 *         превышает максимально допустимый размер. В противном случае возвращает `false`.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если указатель на объект `self` равен `null`.
 * @throw AE_RUNTIME_ERROR_ZERO_ELEMENT_SIZE
 *        Если размер элемента равен нулю.
 */
AE_ATTRIBUTE(SYMBOL)
bool
ae_allocated_block_is_max_size_exceeds(const void *self, ae_usize_t number_of_elements);

/**
 * @brief Изменяет размер выделенного блока памяти.
 *
 * Эта функция изменяет размер блока памяти, выделенного для заданного количества элементов,
 * на новый размер, который вычисляется как произведение количества элементов на размер одного
 * элемента. Если новый размер блока превышает максимально допустимый размер, генерируется ошибка.
 * После этого функция вызывает `ae_allocated_range_resize` для изменения размера выделенной памяти.
 *
 * @param self Указатель на структуру типа `ae_allocated_block_t`, представляющую блок памяти,
 *             для которого требуется изменить размер. Не должен быть равен `NULL`.
 * @param number_of_elements Количество элементов,
 *                           для которых нужно изменить размер блока.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если указатель на объект `self` равен `null`.
 * @throw AE_RUNTIME_ERROR_ZERO_ELEMENT_SIZE
 *        Если размер элемента равен нулю.
 * @throw AE_RUNTIME_ERROR_EXCEEDS_MAX_SIZE
 *        Если новый размер блока превышает максимально допустимый размер.
 * @throw AE_RUNTIME_ERROR_MEMORY_NOT_ALLOCATED
 *        Если не удалось выделить новую память.
 * @throw AE_RUNTIME_ERROR_ALLOCATOR_FUNCTION_NOT_INITIALIZED
 *        Если функция выделения памяти не инициализирована.
 * @throw AE_RUNTIME_ERROR_DEALLOCATOR_FUNCTION_NOT_INITIALIZED
 *        Если функция освобождения памяти не инициализирована.
 */
AE_ATTRIBUTE(SYMBOL)
void
ae_allocated_block_resize(void *self, ae_usize_t number_of_elements);

AE_COMPILER(EXTERN_C_END)

#endif // AE_ALLOCATED_BLOCK_H
