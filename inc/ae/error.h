/**
 * @file error.h
 * @brief Определение структуры и функций для работы с ошибками.
 *
 * Этот файл содержит определение структуры `ae_error_t`,
 * которая используется для хранения информации об ошибках в программе.
 *
 * Также предоставляются функции для манипуляций с ошибками,
 * такие как извлечение кода ошибки, сообщения об ошибке,
 * сброс состояния ошибки и проверка на равенство между ошибками.
 *
 * @note Файл включает в себя функции для работы с кодами и сообщениями об ошибках,
 *       а также механизмы для их логирования и диагностики.
 *
 * @see ae_error_t
 * @see ae_error_code_t
 * @see ae_error_desc_t
 */

#ifndef AE_ERROR_H
#define AE_ERROR_H

#include "bool.h"
#include "attribute.h"
#include "error_fields.h"

/**
 * @struct ae_error
 * @brief Структура для хранения информации об ошибке.
 *
 * Эта структура используется для представления ошибки в программе.
 * Она содержит код ошибки и сопутствующее сообщение,
 * что позволяет удобно и понятно обрабатывать ошибки в коде.
 *
 * Структура может быть использована для передачи информации
 * о произошедшей ошибке между различными частями программы,
 * а также для логирования и диагностики.
 *
 * @see ae_error_code_t
 * @see ae_error_desc_t
 */
typedef struct ae_error
{
    AE_ERROR_FIELDS;
} ae_error_t;

AE_COMPILER(EXTERN_C_BEGIN)

/**
 * @brief Получает код ошибки из структуры `ae_error_t`.
 *
 * Эта функция извлекает код ошибки
 * из переданной структуры типа `ae_error_t`.
 *
 * Если указатель на структуру равен `nullptr`,
 * будет вызван макрос `AE_RUNTIME_ASSERT` для обработки ошибки.
 *
 * @param self Указатель на структуру `ae_error_t`,
 *             из которой необходимо получить код ошибки.
 *
 * @return Код ошибки типа `ae_error_code_t`,
 *         содержащийся в структуре `ae_error_t`.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если указатель `self` равен `nullptr`.
 */
AE_ATTRIBUTE(SYMBOL)
ae_error_code_t
ae_error_get_code(const void *self);

/**
 * @brief Получает сообщение об ошибке из структуры `ae_error_t`.
 *
 * Эта функция извлекает сообщение об ошибке
 * из переданной структуры типа `ae_error_t`.
 *
 * Если указатель на структуру равен `nullptr`,
 * будет вызван макрос `AE_RUNTIME_ASSERT` для обработки ошибки.
 *
 * @param self Указатель на структуру `ae_error_t`,
 *             из которой необходимо получить сообщение об ошибке.
 *
 * @return Сообщение об ошибке типа `ae_error_desc_t`,
 *         содержащееся в структуре `ae_error_t`.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если указатель `self` равен `nullptr`.
 */
AE_ATTRIBUTE(SYMBOL)
ae_error_desc_t
ae_error_get_desc(const void *self);

/**
 * @brief Сбрасывает состояние ошибки в структуре `ae_error_t`.
 *
 * Эта функция устанавливает код ошибки и сообщение об ошибке
 * в переданной структуре типа `ae_error_t`.
 *
 * Если указатель на структуру равен `nullptr`,
 * будет вызван макрос `AE_RUNTIME_ASSERT` для обработки ошибки.
 *
 * @param self Указатель на структуру `ae_error_t`,
 *             которую необходимо сбросить.
 * @param code Код ошибки типа `ae_error_code_t`,
 *             который будет установлен в структуре.
 * @param desc Сообщение об ошибке типа `ae_error_desc_t`,
 *             которое будет установлено в структуре.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если указатель `self` равен `nullptr`.
 */
AE_ATTRIBUTE(SYMBOL)
void
ae_error_set(void *self, ae_error_code_t code, ae_error_desc_t desc);

/**
 * @brief Копирует состояние ошибки из одной структуры `ae_error_t` в другую.
 *
 * Эта функция присваивает код ошибки и сообщение об ошибке
 * из структуры `other` в структуру `self`.
 *
 * @param self Указатель на структуру `ae_error_t`,
 *             в которую будет скопировано состояние ошибки.
 * @param other Указатель на структуру `ae_error_t`,
 *              из которой будет скопировано состояние ошибки.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если указатель `self` или `other` равен `nullptr`.
 */
AE_ATTRIBUTE(SYMBOL)
void
ae_error_assign(void *self, const void *other);

/**
 * @brief Обменивает состояние ошибки между двумя структурами `ae_error_t`.
 *
 * Эта функция временно сохраняет состояние ошибки из структуры `self`,
 * затем копирует состояние ошибки из структуры `other` в `self`,
 * и, наконец, копирует временно сохраненное состояние обратно в `other`.
 * Это позволяет обменять состояния ошибок между двумя структурами.
 *
 * @param self Указатель на структуру `ae_error_t`,
 *             состояние которой будет заменено.
 * @param other Указатель на структуру `ae_error_t`,
 *              состояние которой будет скопировано в `self`.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если указатель `self` или `other` равен `nullptr`.
 *
 * @note Эта функция использует механизм обработки исключений для
 *       обеспечения безопасности при обмене состояний ошибок.
 */
AE_ATTRIBUTE(SYMBOL)
void
ae_error_swap(void *self, void *other);

/**
 * @brief Очищает состояние ошибки,
 *        присваивая структуре `self` состояние пустой ошибки.
 *
 * Эта функция используется для сброса состояния ошибки в структуре `ae_error_t` путем
 * присваивания значений, которые были заданы с помощью макроса `ae_error_empty_initializer`.
 * После вызова функции структура `self` будет иметь код ошибки `AE_ERROR_CODE_NONE`
 * и пустое сообщение (`nullptr`), что указывает на отсутствие ошибок.
 *
 * @param self Указатель на структуру `ae_error_t`, состояние которой будет очищено.
 *            Структура будет инициализирована значениями, указывающими на отсутствие ошибок.
 *
 * @note Убедитесь, что указатель `self` не равен `nullptr`,
 *       прежде чем вызывать эту функцию, чтобы избежать ошибок выполнения.
 */
AE_ATTRIBUTE(SYMBOL)
void
ae_error_clear(void *self);

/**
 * @brief Обменивает состояния ошибок между двумя структурами `ae_error_t`.
 *
 * Эта функция очищает состояние ошибки в структуре `self` с помощью функции `ae_error_clear`,
 * а затем меняет местами содержимое структуры `self` и структуры `other`
 * с помощью функции `ae_error_swap`.
 *
 * Функция полезна для случаев, когда необходимо обменять состояния ошибок между
 * двумя объектами ошибки, например, при обработке нескольких ошибок
 * в различных частях программы.
 *
 * @param self Указатель на структуру `ae_error_t`,
 *             состояние которой будет очищено и затем заменено.
 * @param other Указатель на структуру `ae_error_t`,
 *              состояние которой будет использовано для замены в структуре `self`.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если указатель `self` или `other` равен `nullptr`.
 */
AE_ATTRIBUTE(SYMBOL)
void
ae_error_exchange(void *self, void *other);

/**
 * @brief Получает код ошибки и очищает состояние ошибки.
 *
 * Эта функция извлекает код ошибки из структуры `ae_error_t`,
 * а затем очищает состояние ошибки, восстанавливая его до состояния
 * "нет ошибки". Это позволяет получить информацию о текущей ошибке
 * и одновременно сбросить ее состояние.
 *
 * @param self Указатель на структуру `ae_error_t`,
 *             из которой будет получен код ошибки.
 *
 * @return Код ошибки типа `ae_error_code_t`,
 *         который был установлен в структуре до вызова этой функции.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если указатель `self` равен `nullptr`.
 */
AE_ATTRIBUTE(SYMBOL)
ae_error_code_t
ae_error_get_code_and_clear(void *self);

/**
 * @brief Проверяет, равен ли код ошибки заданному коду.
 *
 * Эта функция сравнивает код ошибки в структуре `ae_error_t`
 * с переданным кодом `code`. Возвращает `true`, если коды равны,
 * и `false` в противном случае.
 *
 * @param self Указатель на структуру `ae_error_t`,
 *             код ошибки которой будет проверен.
 * @param code Код ошибки типа `ae_error_code_t`,
 *             с которым будет произведено сравнение.
 *
 * @return `true`, если код ошибки в структуре `self` равен
 *         переданному коду `code`; `false` в противном случае.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если указатель `self` равен `nullptr`.
 */
AE_ATTRIBUTE(SYMBOL)
bool
ae_error_is_code_equal_to(const void *self, ae_error_code_t code);

/**
 * @brief Проверяет, равны ли коды ошибок двух объектов `ae_error_t`.
 *
 * Эта функция сравнивает код ошибки в структуре `self` с кодом ошибки
 * в другой структуре `other`. Возвращает `true`, если коды равны,
 * и `false` в противном случае.
 *
 * @param self Указатель на структуру `ae_error_t`,
 *             код ошибки которой будет проверен.
 * @param other Указатель на структуру `ae_error_t`,
 *              код ошибки которой будет использован для сравнения.
 *
 * @return `true`, если код ошибки в структуре `self` равен коду ошибки
 *         в структуре `other`; `false` в противном случае.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если указатель `self` или `other` равен `nullptr`.
 */
AE_ATTRIBUTE(SYMBOL)
bool
ae_error_is_code_equal(const void *self, const void *other);

/**
 * @brief Проверяет, равны ли сообщения об ошибках.
 *
 * Эта функция сравнивает сообщение об ошибке в структуре `self`
 * с переданным сообщением `desc`. Возвращает `true`,
 * если сообщения равны, и `false` в противном случае.
 *
 * @param self Указатель на структуру `ae_error_t`,
 *             сообщение об ошибке которой будет проверено.
 * @param desc Сообщение об ошибке типа `ae_error_desc_t`,
 *             с которым будет произведено сравнение.
 *
 * @return `true`, если сообщение об ошибке в структуре `self` равно
 *         переданному сообщению `desc`; `false` в противном случае.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если указатель `self` равен `nullptr`.
 */
AE_ATTRIBUTE(SYMBOL)
bool
ae_error_is_desc_equal_to(const void *self, ae_error_desc_t desc);

/**
 * @brief Проверяет, равны ли сообщения об ошибках двух объектов `ae_error_t`.
 *
 * Эта функция сравнивает сообщение об ошибке в структуре `self` с сообщением
 * об ошибке в другой структуре `other`. Возвращает `true`, если сообщения равны,
 * и `false` в противном случае.
 *
 * @param self Указатель на структуру `ae_error_t`,
 *             сообщение об ошибке которой будет проверено.
 * @param other Указатель на структуру `ae_error_t`,
 *              сообщение об ошибке которой будет использовано для сравнения.
 *
 * @return `true`, если сообщение об ошибке в структуре `self` равно сообщению
 *         об ошибке в структуре `other`; `false` в противном случае.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если указатель `self` или `other` равен `nullptr`.
 */
AE_ATTRIBUTE(SYMBOL)
bool
ae_error_is_desc_equal(const void *self, const void *other);

/**
 * @brief Проверяет, равны ли два объекта `ae_error_t`.
 *
 * Эта функция сравнивает два объекта `ae_error_t` на равенство, проверяя
 * как коды ошибок, так и сообщения об ошибках. Возвращает `true`, если оба
 * объекта равны, и `false` в противном случае.
 *
 * @param self Указатель на структуру `ae_error_t`,
 *             которая будет проверена.
 * @param other Указатель на структуру `ae_error_t`,
 *              с которой будет произведено сравнение.
 *
 * @return `true`, если оба объекта `ae_error_t` равны (код и сообщение
 *         об ошибке совпадают); `false` в противном случае.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если указатель `self` или `other` равен `nullptr`.
 */
AE_ATTRIBUTE(SYMBOL)
bool
ae_error_is_equal(const void *self, const void *other);

/**
 * @brief Проверяет, является ли ошибка отсутствующей.
 *
 * Эта функция определяет, является ли объект `ae_error_t` "пустым" или
 * "отсутствующим" (т.е. не содержит ошибок). Возвращает `true`, если код
 * ошибки равен `AE_ERROR_CODE_NONE`, и `false` в противном случае.
 *
 * @param self Указатель на структуру `ae_error_t`,
 *             которую необходимо проверить.
 *
 * @return `true`, если код ошибки в структуре `self` равен `AE_ERROR_CODE_NONE`;
 *         `false` в противном случае.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если указатель `self` равен `nullptr`.
 */
AE_ATTRIBUTE(SYMBOL)
bool
ae_error_is_none(const void *self);

AE_COMPILER(EXTERN_C_END)

#endif // AE_ERROR_H
