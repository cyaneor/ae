/**
 * @file ptr.h
 * @brief Заголовочный файл, определяющий тип указателя и макросы для работы с ним.
 *
 * Этот файл содержит определения макросов для работы с типом указателя на `void`,
 * который может быть использован для хранения указателей на любые типы данных.
 * Включает определения для минимальных и максимальных значений этого указателя,
 * а также для размера указателя.
 *
 * @note Тип указателя `void *` является универсальным
 *       и требует явного приведения типов при доступе к данным,
 *       на которые он указывает.
 *
 * Макросы:
 * - `ae_ptr_t`      — тип указателя на `void`.
 * - `AE_PTR_T_MIN`  — минимальное значение для указателя `ae_ptr_t`,
 *                     эквивалентное нулевому указателю.
 * - `AE_PTR_T_MAX`  — максимальное значение для указателя `ae_ptr_t`,
 *                     эквивалентное наибольшему возможному адресу.
 * - `AE_PTR_T_SIZE` — размер указателя в байтах,
 *                     определяемый через макрос `__SIZEOF_POINTER__`.
 *
 * Этот файл полезен для ситуаций, когда необходимо работать
 * с универсальными указателями на данные без привязки
 * к конкретному типу данных, а также для операций,
 * зависящих от размера указателей.
 */

#ifndef AE_PTR_H
#define AE_PTR_H

#include "numeric_limit.h"

/**
 * @def ae_ptr_t
 * @brief Определение макроса для указателя на пустой тип.
 *
 * Этот макрос определяет тип указателя на `void`,
 * который может быть использован для хранения
 * указателей на любые типы данных.
 *
 * Тип `void *` является универсальным указателем,
 * который не имеет привязки к конкретному типу данных.
 *
 * @note Использование указателей на `void`
 *       требует явного приведения типа при доступе к данным.
 */
#define ae_ptr_t void *

/**
 * @def AE_PTR_T_MIN
 * @brief Минимальное значение для указателя на тип `ae_ptr_t`.
 *
 * Этот макрос определяет минимальное значение для указателя,
 * которое используется для обозначения пустого или неинициализированного указателя.
 * Это значение приравнивается к нулевому указателю.
 */
#ifndef AE_PTR_T_MIN
#    define AE_PTR_T_MIN AE_NUMERIC_LIMIT_UINT_MIN(ae_ptr_t)
#endif // AE_PTR_T_MIN

/**
 * @def AE_PTR_T_MAX
 * @brief Максимальное значение для указателя на тип `ae_ptr_t`.
 *
 * Этот макрос определяет максимальное значение для указателя,
 * которое представляет собой наибольший возможный адрес в памяти.
 *
 * Это значение приравнивается к значению `-1`,
 * что эквивалентно максимальному значению для указателя.
 */
#ifndef AE_PTR_T_MAX
#    define AE_PTR_T_MAX AE_NUMERIC_LIMIT_UINT_MAX(ae_ptr_t)
#endif // AE_PTR_T_MAX

/**
 * @def AE_PTR_T_SIZE
 * @brief Определение размера указателя.
 *
 * Этот макрос определяет размер указателя в байтах
 * с использованием встроенной макроса `__SIZEOF_POINTER__`.
 *
 * Он позволяет узнать, сколько байт занимает указатель
 * в текущей платформе и компиляторе.
 *
 * Значение макроса зависит от архитектуры системы и может варьироваться:
 * - На 32-битных системах обычно это 4 байта.
 * - На 64-битных системах обычно это 8 байт.
 *
 * Этот макрос полезен для выполнения операций, зависящих от размера указателей,
 * например, при выделении памяти или при манипуляциях с адресами.
 */
#define AE_PTR_T_SIZE AE_VOID_P_SIZE

#endif // AE_PTR_H
