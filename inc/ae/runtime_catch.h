/**
 * @file runtime_catch.h
 * @brief Заголовочный файл для макросов обработки ошибок.
 *
 * Этот файл содержит макросы для обработки ошибок в сочетании с макросом
 * `ae_runtime_try`, позволяя управлять ошибками и восстанавливать выполнение программы.
 * Он использует механизмы восстановления состояния, такие как `setjmp` и `longjmp`.
 */

#ifndef AE_RUNTIME_CATCH_H
#define AE_RUNTIME_CATCH_H

/**
 * @def ae_runtime_catch
 * @brief Альтернативный блок обработки ошибок для макроса `ae_runtime_try`.
 *
 * Этот макрос используется в сочетании с макросом `ae_runtime_try`
 * для обработки ошибок или восстановления выполнения программы
 * в случае возникновения ошибки.
 *
 * Когда выполнение возвращается в блок `else` после неудачного выполнения внутри
 * макроса `ae_runtime_try`, будет выполнен блок кода, связанный с `ae_runtime_catch`.
 *
 * Макрос `ae_runtime_catch` используется для обработки любых ошибок,
 * которые могут возникнуть при выполнении кода, обернутого в `ae_runtime_try`.
 *
 * Он является частью механизма восстановления состояния выполнения,
 * связанного с использованием `setjmp` и `longjmp`.
 *
 * Пример использования:
 * @code
 * ae_runtime_try {
 *     // Код, который нужно выполнить в рамках текущего состояния.
 * } ae_runtime_catch {
 *     // Обработка ошибок или восстановление выполнения.
 * }
 * @endcode
 *
 * @note Макрос `ae_runtime_catch` следует использовать сразу после `ae_runtime_try` для
 *       обработки ошибок, которые были обнаружены в ходе выполнения блока кода.
 */
#define ae_runtime_catch else

/**
 * @def ae_runtime_catch_if
 * @brief Условная обработка ошибок после блока `ae_runtime_try`.
 *
 * Макрос `ae_runtime_catch_if` используется в сочетании с макросом `ae_runtime_try`
 * для определения блока кода, который будет выполняться в случае возникновения
 * ошибки в предыдущем блоке, при этом добавляя условие для обработки ошибок.
 * Этот макрос позволяет более гибко управлять обработкой ошибок, проверяя
 * определенные условия перед выполнением блока обработки.
 *
 * Пример использования:
 * @code
 * ae_runtime_try {
 *     // Код, который может вызвать ошибку
 *     ...
 * } ae_runtime_catch_if (error_code != AE_ERROR_CODE_NONE) {
 *     // Обработка ошибки, если код ошибки не равен AE_ERROR_CODE_NONE
 *     ...
 * }
 * @endcode
 *
 * @note Убедитесь, что условие в `ae_runtime_catch_if` корректно отражает
 *       логику обработки ошибок, и что код внутри блока обрабатывает
 *       возможные ошибки должным образом.
 */
#define ae_runtime_catch_if ae_runtime_catch if

#endif // AE_RUNTIME_CATCH_H
