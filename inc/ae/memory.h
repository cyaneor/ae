#ifndef AE_MEMORY_H
#define AE_MEMORY_H

#include "size.h"
#include "attribute.h"

AE_COMPILER(EXTERN_C_BEGIN)

/**
 * @brief Копирует данные из одного диапазона памяти в другой.
 *
 * Эта функция копирует данные из исходного диапазона памяти в целевой,
 * учитывая длину каждого из диапазонов.
 *
 * @param dst Указатель на начало целевого диапазона памяти,
 *            в который будут скопированы данные.
 * @param dst_len Длина целевого диапазона памяти.
 * @param src Указатель на начало исходного диапазона памяти,
 *            из которого будут скопированы данные.
 * @param src_len Длина исходного диапазона памяти.
 *
 * @return Указатель на следующий элемент после последнего скопированного
 *         в целевом диапазоне (указатель на конец целевого диапазона).
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c dst или @c src являются NULL.
 */
AE_ATTRIBUTE(SYMBOL)
void *
ae_memory_copy_ex(void *dst, ae_usize_t dst_len, const void *src, ae_usize_t src_len);

/**
 * @brief Копирует данные из одного диапазона памяти в другой с одинаковой длиной.
 *
 * Эта функция копирует данные из исходного диапазона памяти в целевой диапазон памяти,
 * предполагая, что длина исходного и целевого диапазонов одинаковая. Для выполнения
 * копирования она использует функцию @ref ae_memory_copy_with, передавая одинаковые
 * значения длины для обоих диапазонов.
 *
 * @param dst Указатель на начало целевого диапазона памяти,
 *            в который будут скопированы данные.
 * @param src Указатель на начало исходного диапазона памяти,
 *            из которого будут скопированы данные.
 * @param len Длина диапазона памяти, которая будет скопирована.
 *
 * @return Указатель на следующий элемент после последнего скопированного
 *         в целевом диапазоне (указатель на конец целевого диапазона).
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c dst или @c src являются NULL.
 */
AE_ATTRIBUTE(SYMBOL)
void *
ae_memory_copy(void *dst, const void *src, ae_usize_t len);

/**
 * @brief Заполняет диапазон памяти заданным значением.
 *
 * Эта функция заполняет указанный диапазон памяти значением,
 * переданным в качестве параметра, с учётом длины диапазона.
 *
 * @param dst Указатель на начало диапазона памяти, который будет заполнен.
 * @param len Длина диапазона памяти в байтах, который необходимо заполнить.
 * @param value Значение, которым будет заполнен диапазон памяти.
 *
 * @return Указатель на следующий элемент после последнего заполненного в диапазоне,
 *         т.е. указатель на конец диапазона.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c dst является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
void *
ae_memory_set(void *dst, ae_usize_t len, ae_u8_t value);

/**
 * @brief Заполняет диапазон памяти нулями.
 *
 * Эта функция заполняет указанный диапазон памяти нулями,
 * используя функцию @ref ae_memory_set.
 *
 * @param dst Указатель на начало диапазона памяти, который будет заполнен.
 * @param len Длина диапазона памяти в байтах, который необходимо заполнить.
 *
 * @return Указатель на следующий элемент после последнего заполненного в диапазоне,
 *         т.е. указатель на конец диапазона.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c dst является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
void *
ae_memory_set_zero(void *dst, ae_usize_t len);

/**
 * @brief Копирует данные из исходного диапазона
 *        в целевой диапазон в обратном порядке.
 *
 * Эта функция выполняет копирование данных из исходного диапазона памяти
 * в целевой диапазон в обратном порядке, начиная с конца.
 *
 * @param dst Указатель на начало целевого диапазона памяти,
 *            куда будут скопированы данные.
 * @param dst_len Длина целевого диапазона памяти в байтах.
 * @param src Указатель на начало исходного диапазона памяти,
 *            откуда будут скопированы данные.
 * @param src_len Длина исходного диапазона памяти в байтах.
 *
 * @return Указатель на начало целевого диапазона памяти после копирования данных.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c dst или @c src является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
void *
ae_memory_copy_rev_ex(void *dst, ae_usize_t dst_len, const void *src, ae_usize_t src_len);

/**
 * @brief Копирует данные из исходного диапазона
 *        в целевой диапазон в обратном порядке.
 *
 * Эта функция выполняет копирование данных из исходного диапазона памяти
 * в целевой диапазон в обратном порядке.
 *
 * @param dst Указатель на начало целевого диапазона памяти,
 *            куда будут скопированы данные.
 * @param src Указатель на начало исходного диапазона памяти,
 *            откуда будут скопированы данные.
 * @param len Длина диапазона памяти, который нужно скопировать, в байтах.
 *
 * @return Указатель на начало целевого диапазона памяти после копирования данных.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c dst или @c src является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
void *
ae_memory_copy_rev(void *dst, const void *src, ae_usize_t len);

/**
 * @brief Перемещает данные из исходного диапазона в целевой диапазон.
 *
 * Эта функция выполняет перемещение данных из одного диапазона памяти в другой,
 * используя функцию @ref ae_memory_raw_move для фактического перемещения.
 *
 * @param dst Указатель на начало целевого диапазона памяти,
 *            в который будут перемещены данные.
 * @param dst_len Длина целевого диапазона памяти в байтах.
 * @param src Указатель на начало исходного диапазона памяти,
 *            из которого будут перемещены данные.
 * @param src_len Длина исходного диапазона памяти в байтах.
 *
 * @return Указатель на начало целевого диапазона памяти после перемещения данных.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c dst или @c src является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
void *
ae_memory_move_ex(void *dst, ae_usize_t dst_len, const void *src, ae_usize_t src_len);

/**
 * @brief Перемещает данные из одного диапазона памяти в другой с одинаковой длиной.
 *
 * Эта функция перемещает данные из исходного диапазона памяти в целевой диапазон памяти,
 * предполагая, что длина исходного и целевого диапазонов одинаковая.
 *
 * Для выполнения перемещения она использует функцию @ref ae_memory_move_with,
 * передавая одинаковые значения длины для обоих диапазонов.
 *
 * @param dst Указатель на начало целевого диапазона памяти,
 *            в который будут перемещены данные.
 * @param src Указатель на начало исходного диапазона памяти,
 *            из которого будут перемещены данные.
 * @param len Длина диапазона памяти, которая будет перемещена.
 *
 * @return Указатель на следующий элемент после последнего перемещённого
 *         в целевом диапазоне (указатель на конец целевого диапазона).
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c dst или @c src являются NULL.
 */
AE_ATTRIBUTE(SYMBOL)
void *
ae_memory_move(void *dst, const void *src, ae_usize_t len);

/**
 * @brief Добавляет данные из исходного диапазона в конец целевого диапазона.
 *
 * Эта функция вычисляет конец целевого диапазона памяти, затем вызывает
 * @ref ae_memory_move_ex для перемещения данных из исходного диапазона в целевой.
 * В результате целевой диапазон памяти будет расширен данными из исходного диапазона.
 *
 * @param dst Указатель на начало целевого диапазона памяти,
 *            в который будут добавлены данные.
 * @param dst_len Длина целевого диапазона памяти в байтах.
 * @param src Указатель на начало исходного диапазона памяти,
 *            из которого будут добавлены данные.
 * @param src_len Длина исходного диапазона памяти в байтах.
 *
 * @return Указатель на начало целевого диапазона памяти после добавления данных.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c dst или @c src является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
void *
ae_memory_append_ex(void *dst, ae_usize_t dst_len, const void *src, ae_usize_t src_len);

/**
 * @brief Заполняет область памяти, повторяя данные из исходной области.
 *
 * Эта функция заполняет целевую область памяти, повторяя данные
 * из исходной области до тех пор, пока целевая область не будет полностью заполнена.
 *
 * Для выполнения операции она использует функцию @ref ae_memory_raw_fill_repeat,
 * передавая указатели на начало и конец как для целевой,
 * так и для исходной области памяти.
 *
 * @param dst Указатель на начало целевой области памяти.
 * @param dst_len Длина целевой области памяти.
 * @param src Указатель на начало исходной области памяти,
 *            данные из которой будут повторяться.
 * @param src_len Длина исходной области памяти.
 *
 * @return Указатель на конец целевой области памяти
 *         после выполнения операции заполнения.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c dst или @c src являются NULL.
 */
AE_ATTRIBUTE(SYMBOL)
void *
ae_memory_fill_repeat(void *dst, ae_usize_t dst_len, const void *src, ae_usize_t src_len);

/**
 * @brief Выполняет сдвиг данных в памяти на указанное количество байт.
 *
 * Эта функция сдвигает указатель на данные в памяти на заданное количество байт
 * и затем перемещает данные из одного диапазона памяти в другой.
 *
 * @param dst Указатель на начало целевого диапазона памяти,
 *            в который будут перемещены данные.
 * @param dst_end Указатель на конец целевого диапазона памяти.
 * @param shift Количество байт, на которое нужно сдвинуть указатель.
 *
 * @return Возвращает указатель
 *         на новый целевой диапазон памяти после перемещения данных.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c dst или @c dst_end является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
void *
ae_memory_shift_left_ex(void *dst, const void *dst_end, ae_usize_t shift);

/**
 * @brief Выполняет сдвиг данных в памяти
 *        на указанное количество байт в обратную сторону.
 *
 * Эта функция сдвигает указатель на данные в памяти на заданное количество байт
 * в противоположную сторону, а затем перемещает данные из одного диапазона памяти в другой.
 *
 * @param dst Указатель на начало целевого диапазона памяти,
 *            в который будут перемещены данные.
 * @param dst_end Указатель на конец целевого диапазона памяти.
 * @param shift Количество байт, на которое нужно сдвинуть указатель.
 *
 * @return Возвращает указатель
 *         на новый целевой диапазон памяти после перемещения данных.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c dst или @c dst_end является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
void *
ae_memory_shift_right_ex(void *dst, const void *dst_end, ae_usize_t shift);

/**
 * @brief Выполняет сдвиг данных в памяти на указанное количество байт влево.
 *
 * Эта функция сдвигает данные в указанном диапазоне памяти на заданное количество байт
 * влево. Она использует функцию @ref ae_memory_raw_shift_left_with для выполнения сдвига,
 * принимая во внимание длину и выравнивание данных.
 *
 * @param dst Указатель на начало диапазона памяти, который нужно сдвигать.
 * @param len Длина диапазона памяти в байтах.
 * @param shift Количество байт, на которое нужно сдвинуть указатель.
 *
 * @return Возвращает указатель
 *         на новый целевой диапазон памяти после сдвига данных.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c dst является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
void *
ae_memory_shift_left(void *dst, ae_usize_t len, ae_usize_t shift);

/**
 * @brief Выполняет сдвиг данных в памяти на указанное количество байт вправо.
 *
 * Эта функция сдвигает данные в указанном диапазоне памяти
 * на заданное количество байт вправо.
 *
 * @param dst Указатель на начало диапазона памяти,
 *            который нужно сдвигать.
 * @param len Длина диапазона памяти в байтах.
 * @param shift Количество байт, на которое нужно сдвинуть указатель.
 *
 * @return Возвращает указатель
 *         на новый целевой диапазон памяти после сдвига данных.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c dst является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
void *
ae_memory_shift_right(void *dst, ae_usize_t len, ae_usize_t shift);

/**
 * @brief Выполняет сдвиг данных в памяти и заполняет их указанным значением.
 *
 * Эта функция сначала сдвигает указатель на данные в памяти на заданное количество байт,
 * а затем заполняет диапазон памяти указанным значением.
 * В случае возникновения ошибок, функция генерирует исключение.
 *
 * @param dst Указатель на начало целевого диапазона памяти,
 *            который будет сдвинут и заполнен значением.
 * @param dst_end Указатель на конец целевого диапазона памяти.
 * @param shift Количество байт, на которое необходимо сдвинуть данные в памяти.
 * @param value Значение, которым будет заполнен диапазон памяти после сдвига.
 *
 * @return Возвращает указатель
 *         на новый целевой диапазон памяти после сдвига и заполнения.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c dst или @c dst_end является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
void *
ae_memory_shift_right_and_fill_ex(void *dst, const void *dst_end, ae_usize_t shift, ae_u8_t value);

/**
 * @brief Выполняет сдвиг данных в памяти и заполняет их заданным значением.
 *
 * Эта функция вызывает @c ae_memory_shift_right_and_fill_ex, предоставляя
 * дополнительные параметры для сдвига данных в памяти и их заполнения
 * указанным значением. Она используется для выполнения сдвига данных
 * на заданное количество байт в памяти и их дальнейшего заполнения.
 *
 * @param dst Указатель на начало целевого диапазона памяти,
 *            который будет сдвинут и заполнен значением.
 * @param len Длина диапазона памяти в байтах, который нужно обработать.
 * @param shift Количество байт, на которое необходимо сдвинуть данные в памяти.
 * @param value Значение, которым будет заполнен диапазон памяти после сдвига.
 *
 * @return Возвращает указатель
 *         на новый целевой диапазон памяти после сдвига и заполнения.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c dst является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
void *
ae_memory_shift_right_and_fill(void *dst, ae_usize_t len, ae_usize_t shift, ae_u8_t value);

AE_COMPILER(EXTERN_C_END)

#endif // AE_MEMORY_H
