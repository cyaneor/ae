#ifndef AE_MEMORY_H
#define AE_MEMORY_H

#include "size.h"
#include "char.h"
#include "attribute.h"

AE_COMPILER(EXTERN_C_BEGIN)

/**
 * @brief Копирует данные из одного диапазона памяти в другой.
 *
 * Эта функция копирует данные из исходного диапазона памяти в целевой,
 * учитывая длину каждого из диапазонов.
 *
 * @param dst Указатель на начало целевого диапазона памяти,
 *            в который будут скопированы данные.
 * @param dst_len Длина целевого диапазона памяти.
 * @param src Указатель на начало исходного диапазона памяти,
 *            из которого будут скопированы данные.
 * @param src_len Длина исходного диапазона памяти.
 *
 * @return Указатель на следующий элемент после последнего скопированного
 *         в целевом диапазоне (указатель на конец целевого диапазона).
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c dst или @c src являются NULL.
 */
AE_ATTRIBUTE(SYMBOL)
void *
ae_memory_copy(void *dst, ae_usize_t dst_len, const void *src, ae_usize_t src_len);

/**
 * @brief Заполняет диапазон памяти заданным значением.
 *
 * Эта функция заполняет указанный диапазон памяти значением,
 * переданным в качестве параметра, с учётом длины диапазона.
 *
 * @param dst Указатель на начало диапазона памяти, который будет заполнен.
 * @param len Длина диапазона памяти в байтах, который необходимо заполнить.
 * @param value Значение, которым будет заполнен диапазон памяти.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c dst является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
void
ae_memory_set_value(void *dst, ae_usize_t len, ae_char_t value);

/**
 * @brief Заполняет диапазон памяти нулями.
 *
 * Эта функция заполняет указанный диапазон памяти нулями,
 * используя функцию @ref ae_memory_set.
 *
 * @param dst Указатель на начало диапазона памяти, который будет заполнен.
 * @param len Длина диапазона памяти в байтах, который необходимо заполнить.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c dst является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
void
ae_memory_set_zero(void *dst, ae_usize_t len);

/**
 * @brief Копирует данные из исходного диапазона
 *        в целевой диапазон в обратном порядке.
 *
 * Эта функция выполняет копирование данных из исходного диапазона памяти
 * в целевой диапазон в обратном порядке, начиная с конца.
 *
 * @param dst Указатель на начало целевого диапазона памяти,
 *            куда будут скопированы данные.
 * @param dst_len Длина целевого диапазона памяти в байтах.
 * @param src Указатель на начало исходного диапазона памяти,
 *            откуда будут скопированы данные.
 * @param src_len Длина исходного диапазона памяти в байтах.
 *
 * @return Указатель на начало целевого диапазона памяти после копирования данных.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c dst или @c src является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
void *
ae_memory_copy_from_end(void *dst, ae_usize_t dst_len, const void *src, ae_usize_t src_len);

/**
 * @brief Перемещает данные из исходного диапазона в целевой диапазон.
 *
 * Эта функция выполняет перемещение данных из одного диапазона памяти в другой,
 * используя функцию @ref ae_memory_raw_move для фактического перемещения.
 *
 * @param dst Указатель на начало целевого диапазона памяти,
 *            в который будут перемещены данные.
 * @param dst_len Длина целевого диапазона памяти в байтах.
 * @param src Указатель на начало исходного диапазона памяти,
 *            из которого будут перемещены данные.
 * @param src_len Длина исходного диапазона памяти в байтах.
 *
 * @return Указатель на начало целевого диапазона памяти после перемещения данных.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c dst или @c src является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
void *
ae_memory_move(void *dst, ae_usize_t dst_len, const void *src, ae_usize_t src_len);

/**
 * @brief Сравнивает два блока памяти заданной длины.
 *
 * Эта функция выполняет сравнение двух блоков памяти,
 * указанных параметрами `lhs` и `rhs`, с заданными длинами `lhs_len` и `rhs_len`.
 *
 * @param lhs Указатель на начало первого блока памяти.
 * @param lhs_len Длина первого блока памяти в байтах.
 * @param rhs Указатель на начало второго блока памяти.
 * @param rhs_len Длина второго блока памяти в байтах.
 *
 * @return Указатель на первое различие между блоками памяти или nullptr,
 *         если блоки равны.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c lhs или @c rhs является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
const void *
ae_memory_compare(const void *lhs, ae_usize_t lhs_len, const void *rhs, ae_usize_t rhs_len);

/**
 * @brief Сравнивает два блока памяти, начиная с конца.
 *
 * Эта функция выполняет сравнение двух блоков памяти,
 * указанных параметрами `lhs` и `rhs`,
 * начиная с конца указанных блоков и двигаясь к началу.
 *
 * @param lhs Указатель на начало первого блока памяти.
 * @param lhs_len Длина первого блока памяти в байтах.
 * @param rhs Указатель на начало второго блока памяти.
 * @param rhs_len Длина второго блока памяти в байтах.
 *
 * @return Указатель на первое различие между блоками памяти или nullptr,
 *         если блоки равны.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c lhs или @c rhs является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
const void *
ae_memory_compare_from_end(const void *lhs,
                           ae_usize_t  lhs_len,
                           const void *rhs,
                           ae_usize_t  rhs_len);

/**
 * @brief Находит блок памяти в другом блоке памяти.
 *
 * Эта функция ищет указанный блок памяти, заданный параметрами `rhs` и `rhs_len`,
 * в другом блоке памяти, заданном параметрами `lhs` и `lhs_len`.
 *
 * @param lhs Указатель на начало блока памяти, в котором производится поиск.
 * @param lhs_len Длина блока памяти, в котором производится поиск, в байтах.
 * @param rhs Указатель на начало блока памяти, который необходимо найти.
 * @param rhs_len Длина блока памяти, который необходимо найти, в байтах.
 *
 * @return Указатель на первое вхождение блока памяти `rhs` в блоке
 *         памяти `lhs` или nullptr, если блок не найден.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c lhs или @c rhs является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
const void *
ae_memory_find(const void *lhs, ae_usize_t lhs_len, const void *rhs, ae_usize_t rhs_len);

/**
 * @brief Находит блок памяти в другом блоке памяти, начиная с конца.
 *
 * Эта функция ищет указанный блок памяти, заданный параметрами `rhs`
 * и `rhs_len`, в другом блоке памяти, заданном параметрами `lhs`
 * и `lhs_len`, начиная с конца первого блока и двигаясь к началу.
 *
 * @param lhs Указатель на начало блока памяти, в котором производится поиск.
 * @param lhs_len Длина блока памяти, в котором производится поиск, в байтах.
 * @param rhs Указатель на начало блока памяти, который необходимо найти.
 * @param rhs_len Длина блока памяти, который необходимо найти, в байтах.
 *
 * @return Указатель на последнее вхождение блока памяти `rhs` в блоке
 *         памяти `lhs` или nullptr, если блок не найден.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c lhs или @c rhs является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
const void *
ae_memory_find_from_end(const void *lhs, ae_usize_t lhs_len, const void *rhs, ae_usize_t rhs_len);

/**
 * @brief Заполняет область памяти, повторяя данные из исходной области.
 *
 * Эта функция заполняет целевую область памяти, повторяя данные
 * из исходной области до тех пор, пока целевая область не будет полностью заполнена.
 *
 * Для выполнения операции она использует функцию @ref ae_memory_raw_set_ex,
 * передавая указатели на начало и конец как для целевой,
 * так и для исходной области памяти.
 *
 * @param dst Указатель на начало целевой области памяти.
 * @param dst_len Длина целевой области памяти.
 * @param src Указатель на начало исходной области памяти,
 *            данные из которой будут повторяться.
 * @param src_len Длина исходной области памяти.
 *
 * @return Указатель на конец целевой области памяти
 *         после выполнения операции заполнения.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c dst или @c src являются NULL.
 */
AE_ATTRIBUTE(SYMBOL)
void *
ae_memory_set(void *dst, ae_usize_t dst_len, const void *src, ae_usize_t src_len);

/**
 * @brief Выполняет сдвиг данных в памяти на указанное количество байт влево.
 *
 * Эта функция сдвигает данные в указанном диапазоне памяти на заданное количество байт
 * влево. Она использует функцию @ref ae_memory_shift_left_ex для выполнения сдвига,
 * принимая во внимание длину и выравнивание данных.
 *
 * @param dst Указатель на начало диапазона памяти, который нужно сдвигать.
 * @param len Длина диапазона памяти в байтах.
 * @param shift Количество байт, на которое нужно сдвинуть указатель.
 *
 * @return Возвращает указатель
 *         на новый целевой диапазон памяти после сдвига данных.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c dst является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
void *
ae_memory_shift_left(void *dst, ae_usize_t len, ae_usize_t shift);

/**
 * @brief Выполняет сдвиг данных в памяти на указанное количество байт вправо.
 *
 * Эта функция сдвигает данные в указанном диапазоне памяти
 * на заданное количество байт вправо.
 *
 * @param dst Указатель на начало диапазона памяти,
 *            который нужно сдвигать.
 * @param len Длина диапазона памяти в байтах.
 * @param shift Количество байт, на которое нужно сдвинуть указатель.
 *
 * @return Возвращает указатель
 *         на новый целевой диапазон памяти после сдвига данных.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c dst является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
void *
ae_memory_shift_right(void *dst, ae_usize_t len, ae_usize_t shift);

/**
 * @brief Выполняет сдвиг данных в памяти и заполняет их заданным значением.
 *
 * Эта функция вызывает @c ae_memory_shift_right_and_fill_ex, предоставляя
 * дополнительные параметры для сдвига данных в памяти и их заполнения
 * указанным значением. Она используется для выполнения сдвига данных
 * на заданное количество байт в памяти и их дальнейшего заполнения.
 *
 * @param dst Указатель на начало целевого диапазона памяти,
 *            который будет сдвинут и заполнен значением.
 * @param len Длина диапазона памяти в байтах, который нужно обработать.
 * @param shift Количество байт, на которое необходимо сдвинуть данные в памяти.
 * @param value Значение, которым будет заполнен диапазон памяти после сдвига.
 *
 * @return Возвращает указатель
 *         на новый целевой диапазон памяти после сдвига и заполнения.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c dst является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
void *
ae_memory_shift_right_and_fill(void *dst, ae_usize_t len, ae_usize_t shift, ae_char_t value);

AE_COMPILER(EXTERN_C_END)

#endif // AE_MEMORY_H
