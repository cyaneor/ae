#ifndef AE_WSTR_RAW_H
#define AE_WSTR_RAW_H

#include "attribute.h"
#include "wchar.h"
#include "size.h"

/**
 * @def ae_wstr_raw_t
 * @brief Синоним для указателя на широкий символ.
 *
 * Этот макрос определяет тип данных `ae_wstr_raw_t` как указатель на @ref ae_wchar_t.
 * Он используется для работы с строками широких символов,
 * обеспечивая удобный способ указания на массив широких символов.
 *
 * @note Указатель на широкий символ может использоваться для представления
 *       строк, содержащих символы, которые могут быть как знаковыми,
 *       так и беззнаковыми, в зависимости от конфигурации компилятора.
 */
#define ae_wstr_raw_t ae_wchar_t *

AE_COMPILER(EXTERN_C_BEGIN)

/**
 * @brief Находит первый экземпляр заданного широкого символа в строке.
 *
 * Эта функция ищет указанный широкий символ в строке,
 * представленном указателем на широкий символ.
 *
 * @param str Указатель на строку широких символов,
 *            в которой будет выполняться поиск.
 * @param len Длина строки `str`.
 * @param value Значение широкого символа,
 *              который необходимо найти в строке.
 *
 * @return Указатель на первый найденный экземпляр символа в строке или `NULL`,
 *         если символ не найден.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c str является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
const ae_wstr_raw_t
ae_wstr_raw_find_char(const ae_wstr_raw_t str, ae_usize_t len, ae_wchar_t value);

/**
 * @brief Находит позицию нулевого терминатора в строке широких символов.
 *
 * Эта функция ищет первый экземпляр нулевого терминатора в строке,
 * представленном указателем на широкий символ.
 *
 * @param str Указатель на строку широких символов,
 *            в которой будет выполняться поиск.
 *
 * @return Указатель на позицию нулевого терминатора в строке или `NULL`,
 *         если терминатор не найден.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c str является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
const ae_wstr_raw_t
ae_wstr_raw_find_of_null_terminator(const ae_wstr_raw_t str);

/**
 * @brief Вычисляет длину строки широких символов.
 *
 * Эта функция определяет длину строки,
 * представленную указателем на широкий символ,
 * путем поиска нулевого терминатора.
 *
 * @param str Указатель на строку широких символов, длину которой необходимо вычислить.
 * @return Длина строки в символах (не включая нулевой терминатор).
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c str является NULL.
 * @throw AE_RUNTIME_ERROR_NO_NULL_TERMINATOR
 *        Если нулевой терминатор не найден в строке.
 */
AE_ATTRIBUTE(SYMBOL)
ae_usize_t
ae_wstr_raw_len(const ae_wstr_raw_t str);

/**
 * @brief Устанавливает значение для строки широких символов.
 *
 * Эта функция заполняет указанную строку широких символов заданным значением
 * на протяжении указанной длины. Это может быть полезно для инициализации
 * или заполнения строки одинаковыми символами.
 *
 * @param str Указатель на начало строки широких символов, которую нужно заполнить.
 * @param len Длина строки, которую нужно заполнить значением.
 * @param value Широкий символ, который будет установлен в строке.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c str является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
void
ae_wstr_raw_set_value(ae_wstr_raw_t str, ae_usize_t len, ae_wchar_t value);

/**
 * @brief Копирует содержимое одной строки широких символов в другую.
 *
 * Эта функция копирует данные из исходной строки широких символов в целевую строку,
 * учитывая указанные длины. Она используется для создания копии строки
 * в другой области памяти.
 *
 * @param str Указатель на начало целевой строки,
 *            в которую будет скопировано содержимое.
 * @param str_len Длина целевой строки.
 * @param src Указатель на начало исходной строки,
 *            содержимое которой будет скопировано.
 * @param src_len Длина исходной строки.
 *
 * @return Указатель на новое местоположение
 *         целевой строки после копирования.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c str или @c src является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
ae_wstr_raw_t
ae_wstr_raw_copy(ae_wstr_raw_t       str,
                 ae_usize_t          str_len,
                 const ae_wstr_raw_t src,
                 ae_usize_t          src_len);

/**
 * @brief Перемещает содержимое одной строки широких символов в другую.
 *
 * Эта функция копирует содержимое из одной строки широких символов в другую,
 * учитывая указанные длины. Она может использоваться для перемещения данных
 * в пределах одной области памяти или между различными областями.
 *
 * @param str Указатель на начало целевой строки,
 *            куда будет перемещено содержимое.
 * @param str_len Длина целевой строки.
 * @param src Указатель на начало исходной строки,
 *            содержимое которой будет перемещено.
 * @param src_len Длина исходной строки.
 *
 * @return Указатель на новое местоположение
 *         целевой строки после перемещения.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c str или @c src является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
ae_wstr_raw_t
ae_wstr_raw_move(ae_wstr_raw_t       str,
                 ae_usize_t          str_len,
                 const ae_wstr_raw_t src,
                 ae_usize_t          src_len);

/**
 * @brief Сравнивает две строки широких символов по заданной длине.
 *
 * Эта функция сравнивает содержимое двух строк широких символов,
 * начиная с указанных адресов и заканчивая заданными длинами.
 *
 * Она используется для определения равенства строк
 * или нахождения первого различия между ними.
 *
 * @param str Указатель на начало первой строки широких символов,
 *            которую нужно сравнить.
 * @param str_len Длина первой строки для сравнения.
 * @param src Указатель на начало второй строки широких символов,
 *            с которой будет производиться сравнение.
 * @param src_len Длина второй строки для сравнения.
 *
 * @return Указатель на первое различие между строками широких символов или nullptr,
 *         если строки равны.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c str или @c src является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
const ae_wstr_raw_t
ae_wstr_raw_compare(const ae_wstr_raw_t str,
                    ae_usize_t          str_len,
                    const ae_wstr_raw_t src,
                    ae_usize_t          src_len);

/**
 * @brief Сравнивает две строки, начиная с конца.
 *
 * Эта функция сравнивает две строки широких символов, начиная с конца,
 * и возвращает указатель на первое различие между ними.
 *
 * @param str Указатель на начало первой строки, которая будет сравнена.
 * @param str_len Длина первой строки.
 * @param src Указатель на начало второй строки, которая будет сравнена.
 * @param src_len Длина второй строки.
 *
 * @return Указатель на первое различие между строками или nullptr,
 *         если строки равны.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c str или @c src является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
const ae_wstr_raw_t
ae_wstr_raw_compare_from_end(const ae_wstr_raw_t str,
                             ae_usize_t          str_len,
                             const ae_wstr_raw_t src,
                             ae_usize_t          src_len);

AE_COMPILER(EXTERN_C_END)

#endif // AE_WSTR_RAW_H
