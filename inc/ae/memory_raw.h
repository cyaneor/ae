/**
 * @file memory_raw.h
 * @brief Определения макросов и функций для работы с диапазонами памяти.
 *
 * Этот файл содержит макросы и функции для выполнения различных операций
 * с диапазонами памяти, таких как заполнение, поиск, сравнение,
 * копирование и перемещение данных.
 *
 * Все функции, определенные в этом файле, поддерживают работу с различными типами данных,
 * что делает их универсальными и эффективными для использования в различных контекстах.
 *
 * Основные операции, предоставляемые этим файлом:
 * - Заполнение диапазона памяти заданным значением.
 * - Поиск заданного значения в диапазоне памяти.
 * - Сравнение двух диапазонов памяти.
 * - Копирование данных из одного диапазона памяти в другой.
 * - Перемещение данных между двумя диапазонами памяти
 *   с учетом возможного перекрытия.
 * - Поиск подстроки в диапазоне памяти как с начала,
 *   так и с конца.
 *
 * Все функции, определенные в этом файле, используют указатели
 * для определения начала и конца диапазонов памяти,
 * что позволяет гибко управлять памятью и эффективно выполнять операции.
 *
 * @note Все функции, определенные в этом файле, могут генерироваться
 *       для различных типов данных с помощью соответствующих макросов.
 *
 * @warning Убедитесь, что указатели на диапазоны памяти корректны и
 *          не указывают на NULL перед вызовом функций, чтобы избежать
 *          ошибок выполнения.
 */

#ifndef AE_MEMORY_RAW_H
#define AE_MEMORY_RAW_H

#include "attribute.h"
#include "size.h"

/**
 * @def ae_memory_raw_swap
 * @brief Обмен значений двух переменных с использованием побитового XOR.
 *
 * Этот макрос меняет местами значения двух переменных типа, поддерживающего побитовые операции
 * (например, int). Он использует операцию побитового исключающего ИЛИ (XOR) для обмена значениями
 * без использования временной переменной.
 *
 * @param a Первая переменная, чье значение будет обменяно.
 * @param b Вторая переменная, чье значение будет обменяно.
 *
 * @note Этот метод может быть неэффективным на некоторых архитектурах или компиляторах.
 * @note Не рекомендуется использовать для типов данных, которые могут быть некорректно
 *       обработаны с помощью побитовых операций (например, с плавающей запятой или указателями).
 */
#define ae_memory_raw_swap(a, b)                                                                   \
    a ^= b;                                                                                        \
    b ^= a;                                                                                        \
    a ^= b

// ------------------------------------------ Методы ------------------------------------------ //

AE_COMPILER(EXTERN_C_BEGIN)

/**
 * @brief Заполняет диапазон памяти значением типа `ae_u8_t`.
 *
 * Эта функция заполняет указанный диапазон памяти значением, переданным в качестве параметра.
 * Она итерирует от начала до конца диапазона и присваивает каждому элементу заданное значение.
 * Если указатель на начало диапазона равен NULL, функция вызывает ошибку и возвращает `NULL`.
 *
 * @param begin Указатель на начало диапазона памяти,
 *              который будет заполнен.
 * @param end Указатель на конец диапазона памяти.
 *            Функция будет заполнять память до этого указателя.
 * @param value Значение, которым будет заполнен диапазон памяти.
 *
 * @return Указатель на следующий элемент после последнего заполненного в диапазоне
 *         (указатель на `end`). Если произошла ошибка (например, `begin` является NULL),
 *         возвращается `NULL`.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c begin или @c end является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
ae_u8_t *
ae_memory_raw_fill_u8(ae_u8_t *begin, const ae_u8_t *end, ae_u8_t value);

/**
 * @brief Заполняет диапазон памяти значением типа `ae_u16_t`.
 *
 * Эта функция заполняет указанный диапазон памяти значением, переданным в качестве параметра.
 * Она итерирует от начала до конца диапазона и присваивает каждому элементу заданное значение.
 * Если указатель на начало диапазона равен NULL, функция вызывает ошибку и возвращает `NULL`.
 *
 * @param begin Указатель на начало диапазона памяти,
 *              который будет заполнен.
 * @param end Указатель на конец диапазона памяти.
 *            Функция будет заполнять память до этого указателя.
 * @param value Значение, которым будет заполнен диапазон памяти.
 *
 * @return Указатель на следующий элемент после последнего заполненного в диапазоне
 *         (указатель на `end`). Если произошла ошибка (например, `begin` является NULL),
 *         возвращается `NULL`.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c begin или @c end является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
ae_u16_t *
ae_memory_raw_fill_u16(ae_u16_t *begin, const ae_u16_t *end, ae_u16_t value);

/**
 * @brief Заполняет диапазон памяти значением типа `ae_u32_t`.
 *
 * Эта функция заполняет указанный диапазон памяти значением, переданным в качестве параметра.
 * Она итерирует от начала до конца диапазона и присваивает каждому элементу заданное значение.
 * Если указатель на начало диапазона равен NULL, функция вызывает ошибку и возвращает `NULL`.
 *
 * @param begin Указатель на начало диапазона памяти,
 *              который будет заполнен.
 * @param end Указатель на конец диапазона памяти.
 *            Функция будет заполнять память до этого указателя.
 * @param value Значение, которым будет заполнен диапазон памяти.
 *
 * @return Указатель на следующий элемент после последнего заполненного в диапазоне
 *         (указатель на `end`). Если произошла ошибка (например, `begin` является NULL),
 *         возвращается `NULL`.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c begin или @c end является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
ae_u32_t *
ae_memory_raw_fill_u32(ae_u32_t *begin, const ae_u32_t *end, ae_u32_t value);

/**
 * @brief Заполняет диапазон памяти значением типа `ae_u64_t`.
 *
 * Эта функция заполняет указанный диапазон памяти значением, переданным в качестве параметра.
 * Она итерирует от начала до конца диапазона и присваивает каждому элементу заданное значение.
 * Если указатель на начало диапазона равен NULL, функция вызывает ошибку и возвращает `NULL`.
 *
 * @param begin Указатель на начало диапазона памяти,
 *              который будет заполнен.
 * @param end Указатель на конец диапазона памяти.
 *            Функция будет заполнять память до этого указателя.
 * @param value Значение, которым будет заполнен диапазон памяти.
 *
 * @return Указатель на следующий элемент после последнего заполненного в диапазоне
 *         (указатель на `end`). Если произошла ошибка (например, `begin` является NULL),
 *         возвращается `NULL`.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c begin или @c end является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
ae_u64_t *
ae_memory_raw_fill_u64(ae_u64_t *begin, const ae_u64_t *end, ae_u64_t value);

/**
 * @brief Заполняет диапазон памяти значением указанного типа.
 *
 * Эта функция заполняет указанный диапазон памяти значением, переданным в качестве параметра.
 * В зависимости от выравнивания диапазона памяти (начало и конец указателей), функция
 * выбирает подходящий тип данных для заполнения. Поддерживаются выравнивания для типов
 * `ae_u64_t`, `ae_u32_t`, `ae_u16_t` и `ae_u8_t`.
 *
 * Функция выполняет заполнение памяти по принципу "пакетов" (в зависимости от выравнивания):
 * - Если диапазон выровнен для типа `ae_u64_t`, используется значение типа `ae_u64_t`.
 * - Если диапазон выровнен для типа `ae_u32_t`, используется значение типа `ae_u32_t`.
 * - Если диапазон выровнен для типа `ae_u16_t`, используется значение типа `ae_u16_t`.
 * - Если диапазон не выровнен для этих типов, используется значение типа `ae_u8_t`.
 *
 * В случае ошибок (например, если указатель на начало диапазона равен NULL),
 * функция возвращает `NULL`.
 *
 * @param begin Указатель на начало диапазона памяти,
 *              который будет заполнен.
 * @param end Указатель на конец диапазона памяти.
 *            Функция будет заполнять память до этого указателя.
 * @param value Значение, которым будет заполнен диапазон памяти.
 *              Тип значения зависит от выравнивания.
 *
 * @return Указатель на следующий элемент после последнего заполненного в диапазоне
 *         (указатель на `end`). Если произошла ошибка (например, `begin` является NULL),
 *         возвращается `NULL`.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c begin или @c end является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
void *
ae_memory_raw_set(void *begin, const void *end, ae_u8_t value);

/**
 * @brief Сравнивает два диапазона памяти поблочно.
 *
 * Эта функция выполняет поблочное сравнение двух диапазонов памяти,
 * определенных указателями на начало и конец каждого диапазона.
 *
 * - Если элементы в соответствующих позициях диапазонов не совпадают,
 *   функция возвращает указатель на первый элемент первого диапазона,
 *   который не совпал с элементом второго диапазона.
 * - Если оба диапазона идентичны (по длине и содержимому),
 *   возвращается `nullptr`.
 *
 * @param lhs Указатель на начало первого диапазона памяти (левый операнд).
 * @param lhs_end Указатель на конец первого диапазона памяти.
 * @param rhs Указатель на начало второго диапазона памяти (правый операнд).
 * @param rhs_end Указатель на конец второго диапазона памяти.
 *
 * @return Указатель на первый элемент в первом диапазоне,
 *         который не совпал с соответствующим элементом во втором диапазоне.
 *         Если оба диапазона равны (по длине и содержимому), возвращается `nullptr`.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c lhs или @c rhs является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
const ae_u8_t *
ae_memory_raw_compare_u8(const ae_u8_t *lhs,
                         const ae_u8_t *lhs_end,
                         const ae_u8_t *rhs,
                         const ae_u8_t *rhs_end);

/**
 * @brief Сравнивает два диапазона памяти поблочно.
 *
 * Эта функция выполняет поблочное сравнение двух диапазонов памяти,
 * определенных указателями на начало и конец каждого диапазона
 * для типа данных @c ae_u16_t.
 *
 * - Если элементы в соответствующих позициях диапазонов не совпадают,
 *   функция возвращает указатель на первый элемент первого диапазона,
 *   который не совпал с элементом второго диапазона.
 * - Если оба диапазона идентичны (по длине и содержимому),
 *   возвращается `nullptr`.
 *
 * @param lhs Указатель на начало первого диапазона памяти (левый операнд).
 * @param lhs_end Указатель на конец первого диапазона памяти.
 * @param rhs Указатель на начало второго диапазона памяти (правый операнд).
 * @param rhs_end Указатель на конец второго диапазона памяти.
 *
 * @return Указатель на первый элемент в первом диапазоне,
 *         который не совпал с соответствующим элементом во втором диапазоне.
 *         Если оба диапазона равны (по длине и содержимому), возвращается `nullptr`.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c lhs или @c rhs является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
const ae_u16_t *
ae_memory_raw_compare_u16(const ae_u16_t *lhs,
                          const ae_u16_t *lhs_end,
                          const ae_u16_t *rhs,
                          const ae_u16_t *rhs_end);

/**
 * @brief Сравнивает два диапазона памяти поблочно.
 *
 * Эта функция выполняет поблочное сравнение двух диапазонов памяти,
 * определенных указателями на начало и конец каждого диапазона
 * для типа данных @c ae_u32_t.
 *
 * - Если элементы в соответствующих позициях диапазонов не совпадают,
 *   функция возвращает указатель на первый элемент первого диапазона,
 *   который не совпал с элементом второго диапазона.
 * - Если оба диапазона идентичны (по длине и содержимому),
 *   возвращается `nullptr`.
 *
 * @param lhs Указатель на начало первого диапазона памяти (левый операнд).
 * @param lhs_end Указатель на конец первого диапазона памяти.
 * @param rhs Указатель на начало второго диапазона памяти (правый операнд).
 * @param rhs_end Указатель на конец второго диапазона памяти.
 *
 * @return Указатель на первый элемент в первом диапазоне,
 *         который не совпал с соответствующим элементом во втором диапазоне.
 *         Если оба диапазона равны (по длине и содержимому), возвращается `nullptr`.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c lhs или @c rhs является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
const ae_u32_t *
ae_memory_raw_compare_u32(const ae_u32_t *lhs,
                          const ae_u32_t *lhs_end,
                          const ae_u32_t *rhs,
                          const ae_u32_t *rhs_end);

/**
 * @brief Сравнивает два диапазона памяти поблочно.
 *
 * Эта функция выполняет поблочное сравнение двух диапазонов памяти,
 * определенных указателями на начало и конец каждого диапазона
 * для типа данных @c ae_u64_t.
 *
 * - Если элементы в соответствующих позициях диапазонов не совпадают,
 *   функция возвращает указатель на первый элемент первого диапазона,
 *   который не совпал с элементом второго диапазона.
 * - Если оба диапазона идентичны (по длине и содержимому),
 *   возвращается `nullptr`.
 *
 * @param lhs Указатель на начало первого диапазона памяти (левый операнд).
 * @param lhs_end Указатель на конец первого диапазона памяти.
 * @param rhs Указатель на начало второго диапазона памяти (правый операнд).
 * @param rhs_end Указатель на конец второго диапазона памяти.
 *
 * @return Указатель на первый элемент в первом диапазоне,
 *         который не совпал с соответствующим элементом во втором диапазоне.
 *         Если оба диапазона равны (по длине и содержимому), возвращается `nullptr`.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c lhs или @c rhs является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
const ae_u64_t *
ae_memory_raw_compare_u64(const ae_u64_t *lhs,
                          const ae_u64_t *lhs_end,
                          const ae_u64_t *rhs,
                          const ae_u64_t *rhs_end);

/**
 * @brief Сравнивает два диапазона памяти побайтово в обратном порядке.
 *
 * Эта функция выполняет побайтовое сравнение двух диапазонов памяти,
 * определенных указателями на начало и конец каждого диапазона,
 * начиная с конца и двигаясь в обратном порядке.
 *
 * - Если элементы в соответствующих позициях диапазонов не совпадают,
 *   функция возвращает указатель на первый элемент первого диапазона,
 *   который не совпал с элементом второго диапазона.
 * - Если оба диапазона идентичны (по длине и содержимому),
 *   возвращается `nullptr`.
 *
 * @param lhs Указатель на начало первого диапазона памяти (левый операнд).
 * @param lhs_end Указатель на конец первого диапазона памяти.
 * @param rhs Указатель на начало второго диапазона памяти (правый операнд).
 * @param rhs_end Указатель на конец второго диапазона памяти.
 *
 * @return Указатель на первый элемент в первом диапазоне,
 *         который не совпал с соответствующим элементом во втором диапазоне.
 *         Если оба диапазона равны (по длине и содержимому), возвращается `nullptr`.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c lhs или @c rhs является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
const ae_u8_t *
ae_memory_raw_compare_rev_u8(const ae_u8_t *lhs,
                             const ae_u8_t *lhs_end,
                             const ae_u8_t *rhs,
                             const ae_u8_t *rhs_end);

/**
 * @brief Сравнивает два диапазона памяти поблочно в обратном порядке.
 *
 * Эта функция выполняет поблочное сравнение двух диапазонов памяти,
 * определенных указателями на начало и конец каждого диапазона,
 * начиная с конца и двигаясь в обратном порядке.
 *
 * - Если элементы в соответствующих позициях диапазонов не совпадают,
 *   функция возвращает указатель на первый элемент первого диапазона,
 *   который не совпал с элементом второго диапазона.
 *
 * - Если оба диапазона идентичны (по длине и содержимому),
 *   возвращается `nullptr`.
 *
 * @param lhs Указатель на начало первого диапазона памяти (левый операнд).
 * @param lhs_end Указатель на конец первого диапазона памяти.
 * @param rhs Указатель на начало второго диапазона памяти (правый операнд).
 * @param rhs_end Указатель на конец второго диапазона памяти.
 *
 * @return Указатель на первый элемент в первом диапазоне,
 *         который не совпал с соответствующим элементом во втором диапазоне.
 *         Если оба диапазона равны (по длине и содержимому), возвращается `nullptr`.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c lhs или @c rhs является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
const ae_u16_t *
ae_memory_raw_compare_rev_u16(const ae_u16_t *lhs,
                              const ae_u16_t *lhs_end,
                              const ae_u16_t *rhs,
                              const ae_u16_t *rhs_end);

/**
 * @brief Сравнивает два диапазона памяти поблочно в обратном порядке.
 *
 * Эта функция выполняет поблочное сравнение двух диапазонов памяти,
 * определенных указателями на начало и конец каждого диапазона,
 * начиная с конца и двигаясь в обратном порядке.
 *
 * - Если элементы в соответствующих позициях диапазонов не совпадают,
 *   функция возвращает указатель на первый элемент первого диапазона,
 *   который не совпал с элементом второго диапазона.
 * - Если оба диапазона идентичны (по длине и содержимому),
 *   возвращается `nullptr`.
 *
 * @param lhs Указатель на начало первого диапазона памяти (левый операнд).
 * @param lhs_end Указатель на конец первого диапазона памяти.
 * @param rhs Указатель на начало второго диапазона памяти (правый операнд).
 * @param rhs_end Указатель на конец второго диапазона памяти.
 *
 * @return Указатель на первый элемент в первом диапазоне,
 *         который не совпал с соответствующим элементом во втором диапазоне.
 *         Если оба диапазона равны (по длине и содержимому), возвращается `nullptr`.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c lhs или @c rhs является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
const ae_u32_t *
ae_memory_raw_compare_rev_u32(const ae_u32_t *lhs,
                              const ae_u32_t *lhs_end,
                              const ae_u32_t *rhs,
                              const ae_u32_t *rhs_end);

/**
 * @brief Сравнивает два диапазона памяти поблочно в обратном порядке.
 *
 * Эта функция выполняет поблочное сравнение двух диапазонов памяти,
 * определенных указателями на начало и конец каждого диапазона,
 * начиная с конца и двигаясь в обратном порядке.
 *
 * - Если элементы в соответствующих позициях диапазонов не совпадают,
 *   функция возвращает указатель на первый элемент первого диапазона,
 *   который не совпал с элементом второго диапазона.
 * - Если оба диапазона идентичны (по длине и содержимому),
 *   возвращается `nullptr`.
 *
 * @param lhs Указатель на начало первого диапазона памяти (левый операнд).
 * @param lhs_end Указатель на конец первого диапазона памяти.
 * @param rhs Указатель на начало второго диапазона памяти (правый операнд).
 * @param rhs_end Указатель на конец второго диапазона памяти.
 *
 * @return Указатель на первый элемент в первом диапазоне,
 *         который не совпал с соответствующим элементом во втором диапазоне.
 *         Если оба диапазона равны (по длине и содержимому), возвращается `nullptr`.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c lhs или @c rhs является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
const ae_u64_t *
ae_memory_raw_compare_rev_u64(const ae_u64_t *lhs,
                              const ae_u64_t *lhs_end,
                              const ae_u64_t *rhs,
                              const ae_u64_t *rhs_end);

/**
 * @brief Копирует данные из одного диапазона памяти в другой.
 *
 * Эта функция выполняет побайтовое копирование данных из одного диапазона памяти в другой,
 * начиная с начала и продолжая до достижения конца одного из диапазонов.
 *
 * - Если оба указателя `dst` и `src` не равны `NULL`, функция копирует данные из диапазона,
 *   определенного указателем на начало и конец диапазона исходных данных, в диапазон назначения.
 * - Копирование происходит побайтово, пока не будет достигнут конец одного из диапазонов.
 *
 * @param dst Указатель на начало целевого диапазона памяти.
 * @param dst_end Указатель на конец целевого диапазона памяти.
 * @param src Указатель на начало исходного диапазона памяти.
 * @param src_end Указатель на конец исходного диапазона памяти.
 *
 * @return Указатель на следующий элемент в целевом диапазоне после завершения копирования.
 *         Это может быть равно `dst_end`, если копирование завершено.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c dst или @c src является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
ae_u8_t *
ae_memory_raw_copy_u8(ae_u8_t       *dst,
                      const ae_u8_t *dst_end,
                      const ae_u8_t *src,
                      const ae_u8_t *src_end);

/**
 * @brief Копирует данные из одного диапазона памяти в другой.
 *
 * Эта функция выполняет побайтовое копирование данных из одного диапазона памяти в другой,
 * начиная с начала и продолжая до достижения конца одного из диапазонов.
 * В данном случае копирование происходит поблочно по 16-битным элементам.
 *
 * - Если оба указателя `dst` и `src` не равны `NULL`, функция копирует данные из диапазона,
 *   определенного указателями на начало и конец диапазона исходных данных, в диапазон назначения.
 * - Копирование происходит поблочно, пока не будет достигнут конец одного из диапазонов.
 *
 * @param dst Указатель на начало целевого диапазона памяти.
 * @param dst_end Указатель на конец целевого диапазона памяти.
 * @param src Указатель на начало исходного диапазона памяти.
 * @param src_end Указатель на конец исходного диапазона памяти.
 *
 * @return Указатель на следующий элемент в целевом диапазоне после завершения копирования.
 *         Это может быть равно `dst_end`, если копирование завершено.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c dst или @c src является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
ae_u16_t *
ae_memory_raw_copy_u16(ae_u16_t       *dst,
                       const ae_u16_t *dst_end,
                       const ae_u16_t *src,
                       const ae_u16_t *src_end);

/**
 * @brief Копирует данные из одного диапазона памяти в другой.
 *
 * Эта функция выполняет побайтовое копирование данных из одного диапазона памяти в другой,
 * начиная с начала и продолжая до достижения конца одного из диапазонов.
 * В данном случае копирование происходит поблочно по 32-битным элементам.
 *
 * - Если оба указателя `dst` и `src` не равны `NULL`, функция копирует данные из диапазона,
 *   определенного указателями на начало и конец диапазона исходных данных, в диапазон назначения.
 * - Копирование происходит поблочно, пока не будет достигнут конец одного из диапазонов.
 *
 * @param dst Указатель на начало целевого диапазона памяти.
 * @param dst_end Указатель на конец целевого диапазона памяти.
 * @param src Указатель на начало исходного диапазона памяти.
 * @param src_end Указатель на конец исходного диапазона памяти.
 *
 * @return Указатель на следующий элемент в целевом диапазоне после завершения копирования.
 *         Это может быть равно `dst_end`, если копирование завершено.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c dst или @c src является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
ae_u32_t *
ae_memory_raw_copy_u32(ae_u32_t       *dst,
                       const ae_u32_t *dst_end,
                       const ae_u32_t *src,
                       const ae_u32_t *src_end);

/**
 * @brief Копирует данные из одного диапазона памяти в другой.
 *
 * Эта функция выполняет побайтовое копирование данных из одного диапазона памяти в другой,
 * начиная с начала и продолжая до достижения конца одного из диапазонов.
 * В данном случае копирование происходит поблочно по 64-битным элементам.
 *
 * - Если оба указателя `dst` и `src` не равны `NULL`, функция копирует данные из диапазона,
 *   определенного указателями на начало и конец диапазона исходных данных, в диапазон назначения.
 * - Копирование происходит поблочно, пока не будет достигнут конец одного из диапазонов.
 *
 * @param dst Указатель на начало целевого диапазона памяти.
 * @param dst_end Указатель на конец целевого диапазона памяти.
 * @param src Указатель на начало исходного диапазона памяти.
 * @param src_end Указатель на конец исходного диапазона памяти.
 *
 * @return Указатель на следующий элемент в целевом диапазоне после завершения копирования.
 *         Это может быть равно `dst_end`, если копирование завершено.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c dst или @c src является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
ae_u64_t *
ae_memory_raw_copy_u64(ae_u64_t       *dst,
                       const ae_u64_t *dst_end,
                       const ae_u64_t *src,
                       const ae_u64_t *src_end);

/**
 * @brief Копирует данные из одного диапазона памяти в другой с учётом выравнивания.
 *
 * Эта функция копирует данные из исходного диапазона памяти в целевой диапазон, с учётом
 * выравнивания по различным типам данных, таким как 64-битные, 32-битные, 16-битные и 8-битные.
 * В зависимости от выравнивания указателей, функция вызывает соответствующую функцию копирования
 * для нужного размера данных.
 *
 * @param dst Указатель на начало целевого диапазона памяти.
 * @param dst_end Указатель на конец целевого диапазона памяти.
 * @param src Указатель на начало исходного диапазона памяти.
 * @param src_end Указатель на конец исходного диапазона памяти.
 *
 * @return Возвращает указатель на новый целевой диапазон памяти (в зависимости от типа данных).
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c dst или @c src является NULL.
 *
 * @note Функция использует различные типы выравнивания: 64-битные, 32-битные, 16-битные и 8-битные.
 *       Для каждого типа данных используется соответствующая функция копирования.
 */
AE_ATTRIBUTE(SYMBOL)
void *
ae_memory_raw_copy(void *dst, const void *dst_end, const void *src, const void *src_end);

/**
 * @brief Копирует данные из одного диапазона памяти в другой в обратном порядке.
 *
 * Эта функция выполняет побайтовое копирование данных из одного диапазона памяти в другой,
 * начиная с конца. Данные копируются из диапазона, определенного указателями `src` и `src_end`,
 * в диапазон, определенный указателями `dst` и `dst_end`, при этом копирование происходит
 * в обратном направлении (с конца к началу).
 *
 * @param dst Указатель на начало целевого диапазона памяти,
 *            в который будет происходить копирование данных.
 * @param dst_end Указатель на конец целевого диапазона памяти.
 * @param src Указатель на начало исходного диапазона памяти,
 *            из которого будут копироваться данные.
 * @param src_end Указатель на конец исходного диапазона памяти.
 *
 * @return Указатель на начало первого элемента целевого диапазона,
 *         в который было скопировано значение.
 *
 *         Это будет тот элемент, в который было скопировано последнее значение из исходного
 *         диапазона. Если диапазоны пусты или указатели `NULL`, возвращается `nullptr`.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c dst или @c src является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
ae_u8_t *
ae_memory_raw_copy_rev_u8(const ae_u8_t *dst,
                          ae_u8_t       *dst_end,
                          const ae_u8_t *src,
                          const ae_u8_t *src_end);

/**
 * @brief Копирует данные из одного диапазона памяти в другой в обратном порядке.
 *
 * Эта функция выполняет побайтовое копирование данных из одного диапазона памяти в другой,
 * начиная с конца. Данные копируются из диапазона, определенного указателями `src` и `src_end`,
 * в диапазон, определенный указателями `dst` и `dst_end`, при этом копирование происходит
 * в обратном направлении (с конца к началу).
 *
 * @param dst Указатель на начало целевого диапазона памяти,
 *            в который будет происходить копирование данных.
 * @param dst_end Указатель на конец целевого диапазона памяти.
 * @param src Указатель на начало исходного диапазона памяти,
 *            из которого будут копироваться данные.
 * @param src_end Указатель на конец исходного диапазона памяти.
 *
 * @return Указатель на начало первого элемента целевого диапазона,
 *         в который было скопировано значение.
 *
 *         Это будет тот элемент, в который было скопировано последнее значение из исходного
 *         диапазона. Если диапазоны пусты или указатели `NULL`, возвращается `nullptr`.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c dst или @c src является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
ae_u16_t *
ae_memory_raw_copy_rev_u16(const ae_u16_t *dst,
                           ae_u16_t       *dst_end,
                           const ae_u16_t *src,
                           const ae_u16_t *src_end);

/**
 * @brief Копирует данные из одного диапазона памяти в другой в обратном порядке.
 *
 * Эта функция выполняет побайтовое копирование данных из одного диапазона памяти в другой,
 * начиная с конца. Данные копируются из диапазона, определенного указателями `src` и `src_end`,
 * в диапазон, определенный указателями `dst` и `dst_end`, при этом копирование происходит
 * в обратном направлении (с конца к началу).
 *
 * @param dst Указатель на начало целевого диапазона памяти,
 *            в который будет происходить копирование данных.
 * @param dst_end Указатель на конец целевого диапазона памяти.
 * @param src Указатель на начало исходного диапазона памяти,
 *            из которого будут копироваться данные.
 * @param src_end Указатель на конец исходного диапазона памяти.
 *
 * @return Указатель на начало первого элемента целевого диапазона,
 *         в который было скопировано значение.
 *
 *         Это будет тот элемент, в который было скопировано последнее значение из исходного
 *         диапазона. Если диапазоны пусты или указатели `NULL`, возвращается `nullptr`.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c dst или @c src является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
ae_u32_t *
ae_memory_raw_copy_rev_u32(const ae_u32_t *dst,
                           ae_u32_t       *dst_end,
                           const ae_u32_t *src,
                           const ae_u32_t *src_end);

/**
 * @brief Копирует данные из одного диапазона памяти в другой в обратном порядке.
 *
 * Эта функция выполняет побайтовое копирование данных из одного диапазона памяти в другой,
 * начиная с конца. Данные копируются из диапазона, определенного указателями `src` и `src_end`,
 * в диапазон, определенный указателями `dst` и `dst_end`, при этом копирование происходит
 * в обратном направлении (с конца к началу).
 *
 * @param dst Указатель на начало целевого диапазона памяти,
 *            в который будет происходить копирование данных.
 * @param dst_end Указатель на конец целевого диапазона памяти.
 * @param src Указатель на начало исходного диапазона памяти,
 *            из которого будут копироваться данные.
 * @param src_end Указатель на конец исходного диапазона памяти.
 *
 * @return Указатель на начало первого элемента целевого диапазона,
 *         в который было скопировано значение.
 *
 *         Это будет тот элемент, в который было скопировано последнее значение из исходного
 *         диапазона. Если диапазоны пусты или указатели `NULL`, возвращается `nullptr`.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c dst или @c src является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
ae_u64_t *
ae_memory_raw_copy_rev_u64(const ae_u64_t *dst,
                           ae_u64_t       *dst_end,
                           const ae_u64_t *src,
                           const ae_u64_t *src_end);

/**
 * @brief Копирует данные в обратном порядке с учётом выравнивания.
 *
 * Эта функция копирует данные из исходного диапазона памяти в целевой диапазон в обратном порядке,
 * с учётом выравнивания по различным типам данных, таким как 64-битные, 32-битные, 16-битные и
 * 8-битные. В зависимости от выравнивания указателей она вызывает соответствующую функцию для
 * копирования данных с нужным размером.
 *
 * @param dst Указатель на начало целевого диапазона памяти.
 * @param dst_end Указатель на конец целевого диапазона памяти.
 * @param src Указатель на начало исходного диапазона памяти.
 * @param src_end Указатель на конец исходного диапазона памяти.
 *
 * @return Возвращает указатель на новый целевой диапазон памяти (в зависимости от типа данных).
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c dst или @c src является NULL.
 *
 * @note Функция использует различные типы выравнивания: 64-битные, 32-битные, 16-битные и 8-битные.
 *       Для каждого типа данных используется отдельная функция копирования.
 */
AE_ATTRIBUTE(SYMBOL)
void *
ae_memory_raw_copy_rev(const void *dst, void *dst_end, const void *src, const void *src_end);

/**
 * @brief Перемещает данные из одного диапазона памяти в другой.
 *
 * Эта функция выполняет перемещение данных
 * между двумя диапазонами памяти.
 *
 * - Если диапазоны памяти перекрываются,
 *   то данные копируются в обратном порядке
 *   с использованием функции `ae_memory_raw_copy_rev_u8`.
 * - В случае отсутствия перекрытия диапазонов,
 *   данные копируются в прямом порядке с использованием функции `ae_memory_raw_copy_u8`.
 *
 * Это позволяет эффективно перемещать данные,
 * учитывая возможное перекрытие исходных и целевых диапазонов.
 *
 * @param dst Указатель на начало целевого диапазона памяти,
 *            в который будут перемещены данные.
 * @param dst_end Указатель на конец целевого диапазона памяти.
 * @param src Указатель на начало исходного диапазона памяти,
 *            из которого будут перемещены данные.
 * @param src_end Указатель на конец исходного диапазона памяти.
 *
 * @return Указатель на следующий свободный элемент
 *         в целевом диапазоне памяти после перемещения данных.
 *
 *         Если диапазоны памяти не были перемещены,
 *         возвращается указатель на `dst`.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c dst или @c src является NULL.
 *
 * @note Эта функция проверяет на перекрытие диапазонов памяти
 *       и выбирает соответствующую функцию копирования данных.
 *
 *       В случае перекрытия используется копирование в обратном порядке,
 *       чтобы избежать повреждения данных.
 */
AE_ATTRIBUTE(SYMBOL)
ae_u8_t *
ae_memory_raw_move_u8(ae_u8_t       *dst,
                      const ae_u8_t *dst_end,
                      const ae_u8_t *src,
                      const ae_u8_t *src_end);

/**
 * @brief Перемещает данные из одного диапазона памяти в другой.
 *
 * Эта функция выполняет перемещение данных
 * между двумя диапазонами памяти.
 *
 * - Если диапазоны памяти перекрываются,
 *   то данные копируются в обратном порядке
 *   с использованием функции `ae_memory_raw_copy_rev_u16`.
 * - В случае отсутствия перекрытия диапазонов,
 *   данные копируются в прямом порядке с использованием функции `ae_memory_raw_copy_u16`.
 *
 * Это позволяет эффективно перемещать данные,
 * учитывая возможное перекрытие исходных и целевых диапазонов.
 *
 * @param dst Указатель на начало целевого диапазона памяти,
 *            в который будут перемещены данные.
 * @param dst_end Указатель на конец целевого диапазона памяти.
 * @param src Указатель на начало исходного диапазона памяти,
 *            из которого будут перемещены данные.
 * @param src_end Указатель на конец исходного диапазона памяти.
 *
 * @return Указатель на следующий свободный элемент
 *         в целевом диапазоне памяти после перемещения данных.
 *
 *         Если диапазоны памяти не были перемещены,
 *         возвращается указатель на `dst`.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c dst или @c src является NULL.
 *
 * @note Эта функция проверяет на перекрытие диапазонов памяти
 *       и выбирает соответствующую функцию копирования данных.
 *
 *       В случае перекрытия используется копирование в обратном порядке,
 *       чтобы избежать повреждения данных.
 */
AE_ATTRIBUTE(SYMBOL)
ae_u16_t *
ae_memory_raw_move_u16(ae_u16_t       *dst,
                       const ae_u16_t *dst_end,
                       const ae_u16_t *src,
                       const ae_u16_t *src_end);

/**
 * @brief Перемещает данные из одного диапазона памяти в другой.
 *
 * Эта функция выполняет перемещение данных
 * между двумя диапазонами памяти.
 *
 * - Если диапазоны памяти перекрываются, то данные копируются
 *   в обратном порядке с использованием функции `ae_memory_raw_copy_rev_u32`.
 * - В случае отсутствия перекрытия диапазонов,
 *   данные копируются в прямом порядке с использованием функции `ae_memory_raw_copy_u32`.
 *
 * Это позволяет эффективно перемещать данные,
 * учитывая возможное перекрытие исходных и целевых диапазонов.
 *
 * @param dst Указатель на начало целевого диапазона памяти,
 *            в который будут перемещены данные.
 * @param dst_end Указатель на конец целевого диапазона памяти.
 * @param src Указатель на начало исходного диапазона памяти,
 *            из которого будут перемещены данные.
 * @param src_end Указатель на конец исходного диапазона памяти.
 *
 * @return Указатель на следующий свободный элемент
 *         в целевом диапазоне памяти после перемещения данных.
 *
 *         Если диапазоны памяти не были перемещены,
 *         возвращается указатель на `dst`.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c dst или @c src является NULL.
 *
 * @note Эта функция проверяет на перекрытие диапазонов памяти
 *       и выбирает соответствующую функцию копирования данных.
 *
 *       В случае перекрытия используется копирование в обратном порядке,
 *       чтобы избежать повреждения данных.
 */
AE_ATTRIBUTE(SYMBOL)
ae_u32_t *
ae_memory_raw_move_u32(ae_u32_t       *dst,
                       const ae_u32_t *dst_end,
                       const ae_u32_t *src,
                       const ae_u32_t *src_end);

/**
 * @brief Перемещает данные из одного диапазона памяти в другой.
 *
 * Эта функция выполняет перемещение данных
 * между двумя диапазонами памяти.
 *
 * - Если диапазоны памяти перекрываются,
 *   то данные копируются в обратном порядке
 *   с использованием функции `ae_memory_raw_copy_rev_u64`.
 * - В случае отсутствия перекрытия диапазонов,
 *   данные копируются в прямом порядке с использованием функции `ae_memory_raw_copy_u64`.
 *
 * Это позволяет эффективно перемещать данные,
 * учитывая возможное перекрытие исходных и целевых диапазонов.
 *
 * @param dst Указатель на начало целевого диапазона памяти,
 *            в который будут перемещены данные.
 * @param dst_end Указатель на конец целевого диапазона памяти.
 * @param src Указатель на начало исходного диапазона памяти,
 *            из которого будут перемещены данные.
 * @param src_end Указатель на конец исходного диапазона памяти.
 *
 * @return Указатель на следующий свободный элемент
 *         в целевом диапазоне памяти после перемещения данных.
 *
 *         Если диапазоны памяти не были перемещены,
 *         возвращается указатель на `dst`.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c dst или @c src является NULL.
 *
 * @note Эта функция проверяет на перекрытие диапазонов памяти
 *       и выбирает соответствующую функцию копирования данных.
 *
 *       В случае перекрытия используется копирование в обратном порядке,
 *       чтобы избежать повреждения данных.
 */
AE_ATTRIBUTE(SYMBOL)
ae_u64_t *
ae_memory_raw_move_u64(ae_u64_t       *dst,
                       const ae_u64_t *dst_end,
                       const ae_u64_t *src,
                       const ae_u64_t *src_end);

/**
 * @brief Перемещает данные из одного диапазона памяти в другой с учётом выравнивания.
 *
 * Эта функция выполняет перемещение данных из исходного диапазона памяти в целевой диапазон
 * с учётом различных типов данных, таких как 64-битные, 32-битные, 16-битные или 8-битные значения.
 * В зависимости от выравнивания указателей, она вызывает соответствующую функцию для перемещения
 * данных с нужным размером.
 *
 * @param dst Указатель на начало целевого диапазона памяти.
 * @param dst_end Указатель на конец целевого диапазона памяти.
 * @param src Указатель на начало исходного диапазона памяти.
 * @param src_end Указатель на конец исходного диапазона памяти.
 *
 * @return Возвращает указатель на новый целевой диапазон памяти
 *         (в зависимости от типа данных).
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c dst или @c src является NULL.
 *
 * @note Функция использует различные типы выравнивания: 64-битные, 32-битные, 16-битные и 8-битные.
 *       Для каждого типа данных используется отдельная функция перемещения.
 */
AE_ATTRIBUTE(SYMBOL)
void *
ae_memory_raw_move(void *dst, const void *dst_end, const void *src, const void *src_end);

/**
 * @brief Заполняет область памяти, повторяя исходную область в целевую.
 *
 * Эта функция перемещает данные из исходной области памяти в целевую область памяти
 * повторно до тех пор, пока целевая область не будет полностью заполнена.
 *
 * @param dst Указатель на начало целевой области памяти.
 * @param dst_end Указатель на конец целевой области памяти.
 * @param src Указатель на начало исходной области памяти.
 * @param src_end Указатель на конец исходной области памяти.
 *
 * @return Указатель на конец целевой области памяти после выполнения операции заполнения.
 *
 * @note Функция завершит выполнение, как только целевая область памяти будет полностью заполнена.
 *       Предполагается, что целевая область имеет достаточно места для многократного повторения
 *       данных из исходной области.
 *
 * @throws AE_RUNTIME_ERROR_NULL_POINTER
 *         Если хотя бы один из указателей `dst` или `src` равен нулю.
 */
AE_ATTRIBUTE(SYMBOL)
void *
ae_memory_raw_fill_repeat(void *dst, const void *dst_end, const void *src, const void *src_end);

/**
 * @brief Находит первое вхождение последовательности
 *        байтов в другом диапазоне памяти.
 *
 * Эта функция выполняет поиск первого вхождения последовательности байтов,
 * представленной указателем на массив `rhs`, в диапазоне памяти,
 * указанном указателями `lhs` и `lhs_end`. Сравнение выполняется побайтово.
 *
 * @param lhs Указатель на начало диапазона памяти, в котором будет выполнен поиск.
 * @param lhs_end Указатель на конец диапазона памяти, в котором будет выполнен поиск.
 * @param rhs Указатель на начало последовательности байтов, которую нужно найти.
 * @param rhs_end Указатель на конец последовательности байтов, которую нужно найти.
 *
 * @return Указатель на первый элемент в массиве `lhs`, с которого начинается последовательность,
 *         совпадающая с `rhs`, или nullptr, если совпадение не найдено.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c dst или @c src является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
const ae_u8_t *
ae_memory_raw_find_u8(const ae_u8_t *lhs,
                      const ae_u8_t *lhs_end,
                      const ae_u8_t *rhs,
                      const ae_u8_t *rhs_end);

/**
 * @brief Находит первое вхождение последовательности
 *        16-битных элементов в другом диапазоне памяти.
 *
 * Эта функция выполняет поиск первого вхождения последовательности 16-битных элементов,
 * представленной указателем на массив `rhs`, в диапазоне памяти, указанном указателями
 * `lhs` и `lhs_end`. Сравнение выполняется побайтово.
 *
 * @param lhs Указатель на начало диапазона памяти, в котором будет выполнен поиск.
 * @param lhs_end Указатель на конец диапазона памяти, в котором будет выполнен поиск.
 * @param rhs Указатель на начало последовательности 16-битных элементов, которую нужно найти.
 * @param rhs_end Указатель на конец последовательности 16-битных элементов, которую нужно найти.
 *
 * @return Указатель на первый элемент в массиве `lhs`, с которого начинается последовательность,
 *         совпадающая с `rhs`, или nullptr, если совпадение не найдено.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c dst или @c src является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
const ae_u16_t *
ae_memory_raw_find_u16(const ae_u16_t *lhs,
                       const ae_u16_t *lhs_end,
                       const ae_u16_t *rhs,
                       const ae_u16_t *rhs_end);

/**
 * @brief Находит первое вхождение последовательности
 *        32-битных элементов в другом диапазоне памяти.
 *
 * Эта функция выполняет поиск первого вхождения последовательности 32-битных элементов,
 * представленной указателем на массив `rhs`, в диапазоне памяти, указанном указателями
 * `lhs` и `lhs_end`. Сравнение выполняется побайтово.
 *
 * @param lhs Указатель на начало диапазона памяти, в котором будет выполнен поиск.
 * @param lhs_end Указатель на конец диапазона памяти, в котором будет выполнен поиск.
 * @param rhs Указатель на начало последовательности 32-битных элементов, которую нужно найти.
 * @param rhs_end Указатель на конец последовательности 32-битных элементов, которую нужно найти.
 *
 * @return Указатель на первый элемент в массиве `lhs`, с которого начинается последовательность,
 *         совпадающая с `rhs`, или nullptr, если совпадение не найдено.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c dst или @c src является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
const ae_u32_t *
ae_memory_raw_find_u32(const ae_u32_t *lhs,
                       const ae_u32_t *lhs_end,
                       const ae_u32_t *rhs,
                       const ae_u32_t *rhs_end);

/**
 * @brief Находит первое вхождение последовательности
 *        64-битных элементов в другом диапазоне памяти.
 *
 * Эта функция выполняет поиск первого вхождения последовательности 64-битных элементов,
 * представленной указателем на массив `rhs`, в диапазоне памяти, указанном указателями
 * `lhs` и `lhs_end`. Сравнение выполняется побайтово.
 *
 * @param lhs Указатель на начало диапазона памяти, в котором будет выполнен поиск.
 * @param lhs_end Указатель на конец диапазона памяти, в котором будет выполнен поиск.
 * @param rhs Указатель на начало последовательности 64-битных элементов, которую нужно найти.
 * @param rhs_end Указатель на конец последовательности 64-битных элементов, которую нужно найти.
 *
 * @return Указатель на первый элемент в массиве `lhs`, с которого начинается последовательность,
 *         совпадающая с `rhs`, или nullptr, если совпадение не найдено.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c dst или @c src является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
const ae_u64_t *
ae_memory_raw_find_u64(const ae_u64_t *lhs,
                       const ae_u64_t *lhs_end,
                       const ae_u64_t *rhs,
                       const ae_u64_t *rhs_end);

/**
 * @brief Функция поиска в памяти в обратном направлении.
 *
 * Данная функция ищет в памяти (от области `lhs_end` до области `lhs`)
 * подстроку, соответствующую диапазону памяти от `rhs` до `rhs_end`.
 * Поиск выполняется в обратном порядке, начиная с `lhs_end` и двигаясь к `lhs`.
 *
 * @param[in] lhs Указатель на начало области памяти,
 *                в которой будет происходить поиск.
 * @param[in] lhs_end Указатель на конец области памяти,
 *                    в пределах которой будет выполняться поиск.
 * @param[in] rhs Указатель на начало подстроки,
 *                которую нужно найти.
 * @param[in] rhs_end Указатель на конец подстроки,
 *                    которую нужно найти.
 *
 * @return Указатель на первое вхождение подстроки `rhs` в области памяти от `lhs`
 *         до `lhs_end` в обратном порядке, или `nullptr`, если подстрока не найдена.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c dst или @c src является NULL.
 *
 * @note Функция использует вспомогательную функцию `ae_memory_raw_compare_rev_u8`,
 *       чтобы сравнить подстроку с участком памяти. Также функция включает
 *       проверку на нулевые указатели с помощью макроса `AE_RUNTIME_ASSERT`.
 */
AE_ATTRIBUTE(SYMBOL)
const ae_u8_t *
ae_memory_raw_find_rev_u8(const ae_u8_t *lhs,
                          const ae_u8_t *lhs_end,
                          const ae_u8_t *rhs,
                          const ae_u8_t *rhs_end);

/**
 * @brief Функция поиска в памяти в обратном направлении.
 *
 * Данная функция ищет в памяти (от области `lhs_end` до области `lhs`)
 * подстроку, соответствующую диапазону памяти от `rhs` до `rhs_end`.
 * Поиск выполняется в обратном порядке, начиная с `lhs_end` и двигаясь к `lhs`.
 *
 * @param[in] lhs Указатель на начало области памяти,
 *                в которой будет происходить поиск.
 * @param[in] lhs_end Указатель на конец области памяти,
 *                    в пределах которой будет выполняться поиск.
 * @param[in] rhs Указатель на начало подстроки,
 *                которую нужно найти.
 * @param[in] rhs_end Указатель на конец подстроки,
 *                    которую нужно найти.
 *
 * @return Указатель на первое вхождение подстроки `rhs` в области памяти от `lhs`
 *         до `lhs_end` в обратном порядке, или `nullptr`, если подстрока не найдена.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c dst или @c src является NULL.
 *
 * @note Функция использует вспомогательную функцию `ae_memory_raw_compare_rev_u8`,
 *       чтобы сравнить подстроку с участком памяти. Также функция включает
 *       проверку на нулевые указатели с помощью макроса `AE_RUNTIME_ASSERT`.
 */
AE_ATTRIBUTE(SYMBOL)
const ae_u16_t *
ae_memory_raw_find_rev_u16(const ae_u16_t *lhs,
                           const ae_u16_t *lhs_end,
                           const ae_u16_t *rhs,
                           const ae_u16_t *rhs_end);

/**
 * @brief Функция поиска в памяти в обратном направлении.
 *
 * Данная функция ищет в памяти (от области `lhs_end` до области `lhs`)
 * подстроку, соответствующую диапазону памяти от `rhs` до `rhs_end`.
 * Поиск выполняется в обратном порядке, начиная с `lhs_end` и двигаясь к `lhs`.
 *
 * @param[in] lhs Указатель на начало области памяти,
 *                в которой будет происходить поиск.
 * @param[in] lhs_end Указатель на конец области памяти,
 *                    в пределах которой будет выполняться поиск.
 * @param[in] rhs Указатель на начало подстроки,
 *                которую нужно найти.
 * @param[in] rhs_end Указатель на конец подстроки,
 *                    которую нужно найти.
 *
 * @return Указатель на первое вхождение подстроки `rhs` в области памяти от `lhs`
 *         до `lhs_end` в обратном порядке, или `nullptr`, если подстрока не найдена.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c dst или @c src является NULL.
 *
 * @note Функция использует вспомогательную функцию `ae_memory_raw_compare_rev_u8`,
 *       чтобы сравнить подстроку с участком памяти. Также функция включает
 *       проверку на нулевые указатели с помощью макроса `AE_RUNTIME_ASSERT`.
 */
AE_ATTRIBUTE(SYMBOL)
const ae_u32_t *
ae_memory_raw_find_rev_u32(const ae_u32_t *lhs,
                           const ae_u32_t *lhs_end,
                           const ae_u32_t *rhs,
                           const ae_u32_t *rhs_end);

/**
 * @brief Функция поиска в памяти в обратном направлении.
 *
 * Данная функция ищет в памяти (от области `lhs_end` до области `lhs`)
 * подстроку, соответствующую диапазону памяти от `rhs` до `rhs_end`.
 * Поиск выполняется в обратном порядке, начиная с `lhs_end` и двигаясь к `lhs`.
 *
 * @param[in] lhs Указатель на начало области памяти,
 *                в которой будет происходить поиск.
 * @param[in] lhs_end Указатель на конец области памяти,
 *                    в пределах которой будет выполняться поиск.
 * @param[in] rhs Указатель на начало подстроки,
 *                которую нужно найти.
 * @param[in] rhs_end Указатель на конец подстроки,
 *                    которую нужно найти.
 *
 * @return Указатель на первое вхождение подстроки `rhs` в области памяти от `lhs`
 *         до `lhs_end` в обратном порядке, или `nullptr`, если подстрока не найдена.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c dst или @c src является NULL.
 *
 * @note Функция использует вспомогательную функцию `ae_memory_raw_compare_rev_u8`,
 *       чтобы сравнить подстроку с участком памяти. Также функция включает
 *       проверку на нулевые указатели с помощью макроса `AE_RUNTIME_ASSERT`.
 */
AE_ATTRIBUTE(SYMBOL)
const ae_u64_t *
ae_memory_raw_find_rev_u64(const ae_u64_t *lhs,
                           const ae_u64_t *lhs_end,
                           const ae_u64_t *rhs,
                           const ae_u64_t *rhs_end);

/**
 * @brief Находит первое вхождение заданного значения в диапазоне памяти.
 *
 * Эта функция выполняет поиск указанного значения в диапазоне памяти,
 * определенном указателями на начало и конец.
 *
 * - Если значение найдено, возвращается указатель на его первое вхождение.
 * - Если значение не найдено, возвращается `nullptr`.
 *
 * @param begin Указатель на начало диапазона памяти,
 *              в котором будет выполняться поиск.
 * @param end Указатель на конец диапазона памяти.
 * @param value Значение, которое нужно найти в диапазоне памяти.
 *
 * @return Указатель на первое вхождение найденного значения в диапазоне памяти.
 *         Если значение не найдено, возвращается `nullptr`.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c begin или @c end является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
const ae_u8_t *
ae_memory_raw_find_value_u8(const ae_u8_t *begin, const ae_u8_t *end, ae_u8_t value);

/**
 * @brief Находит первое вхождение заданного значения в диапазоне памяти.
 *
 * Эта функция выполняет поиск указанного значения в диапазоне памяти,
 * определенном указателями на начало и конец.
 *
 * - Если значение найдено, возвращается указатель на его первое вхождение.
 * - Если значение не найдено, возвращается `nullptr`.
 *
 * @param begin Указатель на начало диапазона памяти,
 *              в котором будет выполняться поиск.
 * @param end Указатель на конец диапазона памяти.
 * @param value Значение, которое нужно найти в диапазоне памяти.
 *
 * @return Указатель на первое вхождение найденного значения в диапазоне памяти.
 *         Если значение не найдено, возвращается `nullptr`.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c begin или @c end является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
const ae_u16_t *
ae_memory_raw_find_value_u16(const ae_u16_t *begin, const ae_u16_t *end, ae_u16_t value);

/**
 * @brief Находит первое вхождение заданного значения в диапазоне памяти.
 *
 * Эта функция выполняет поиск указанного значения в диапазоне памяти,
 * определенном указателями на начало и конец.
 *
 * - Если значение найдено, возвращается указатель на его первое вхождение.
 * - Если значение не найдено, возвращается `nullptr`.
 *
 * @param begin Указатель на начало диапазона памяти,
 *              в котором будет выполняться поиск.
 * @param end Указатель на конец диапазона памяти.
 * @param value Значение, которое нужно найти в диапазоне памяти.
 *
 * @return Указатель на первое вхождение найденного значения в диапазоне памяти.
 *         Если значение не найдено, возвращается `nullptr`.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c begin или @c end является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
const ae_u32_t *
ae_memory_raw_find_value_u32(const ae_u32_t *begin, const ae_u32_t *end, ae_u32_t value);

/**
 * @brief Находит первое вхождение заданного значения в диапазоне памяти.
 *
 * Эта функция выполняет поиск указанного значения в диапазоне памяти,
 * определенном указателями на начало и конец.
 *
 * - Если значение найдено, возвращается указатель на его первое вхождение.
 * - Если значение не найдено, возвращается `nullptr`.
 *
 * @param begin Указатель на начало диапазона памяти,
 *              в котором будет выполняться поиск.
 * @param end Указатель на конец диапазона памяти.
 * @param value Значение, которое нужно найти в диапазоне памяти.
 *
 * @return Указатель на первое вхождение найденного значения в диапазоне памяти.
 *         Если значение не найдено, возвращается `nullptr`.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c begin или @c end является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
const ae_u64_t *
ae_memory_raw_find_value_u64(const ae_u64_t *begin, const ae_u64_t *end, ae_u64_t value);

/**
 * @brief Находит последнее вхождение заданного значения в диапазоне памяти (обратный поиск).
 *
 * Эта функция выполняет поиск указанного значения в диапазоне памяти,
 * определенном указателями на начало и конец, но в обратном направлении.
 *
 * - Если значение найдено, возвращается указатель на его последнее вхождение в диапазоне.
 * - Если значение не найдено, возвращается `nullptr`.
 *
 * @param begin Указатель на начало диапазона памяти,
 *              в котором будет выполняться поиск.
 * @param end Указатель на конец диапазона памяти.
 * @param value Значение, которое нужно найти в диапазоне памяти.
 *
 * @return Указатель на последнее вхождение найденного значения в диапазоне памяти.
 *         Если значение не найдено, возвращается `nullptr`.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c begin или @c end является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
const ae_u8_t *
ae_memory_raw_find_value_rev_u8(const ae_u8_t *begin, const ae_u8_t *end, ae_u8_t value);

/**
 * @brief Находит последнее вхождение заданного значения в диапазоне памяти (обратный поиск).
 *
 * Эта функция выполняет поиск указанного значения в диапазоне памяти,
 * определенном указателями на начало и конец, но в обратном направлении.
 *
 * - Если значение найдено, возвращается указатель на его последнее вхождение в диапазоне.
 * - Если значение не найдено, возвращается `nullptr`.
 *
 * @param begin Указатель на начало диапазона памяти,
 *              в котором будет выполняться поиск.
 * @param end Указатель на конец диапазона памяти.
 * @param value Значение, которое нужно найти в диапазоне памяти.
 *
 * @return Указатель на последнее вхождение найденного значения в диапазоне памяти.
 *         Если значение не найдено, возвращается `nullptr`.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c begin или @c end является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
const ae_u16_t *
ae_memory_raw_find_value_rev_u16(const ae_u16_t *begin, const ae_u16_t *end, ae_u16_t value);

/**
 * @brief Находит последнее вхождение заданного значения в диапазоне памяти (обратный поиск).
 *
 * Эта функция выполняет поиск указанного значения в диапазоне памяти,
 * определенном указателями на начало и конец, но в обратном направлении.
 *
 * - Если значение найдено, возвращается указатель на его последнее вхождение в диапазоне.
 * - Если значение не найдено, возвращается `nullptr`.
 *
 * @param begin Указатель на начало диапазона памяти,
 *              в котором будет выполняться поиск.
 * @param end Указатель на конец диапазона памяти.
 * @param value Значение, которое нужно найти в диапазоне памяти.
 *
 * @return Указатель на последнее вхождение найденного значения в диапазоне памяти.
 *         Если значение не найдено, возвращается `nullptr`.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c begin или @c end является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
const ae_u32_t *
ae_memory_raw_find_value_rev_u32(const ae_u32_t *begin, const ae_u32_t *end, ae_u32_t value);

/**
 * @brief Находит последнее вхождение заданного значения в диапазоне памяти (обратный поиск).
 *
 * Эта функция выполняет поиск указанного значения в диапазоне памяти,
 * определенном указателями на начало и конец, но в обратном направлении.
 *
 * - Если значение найдено, возвращается указатель на его последнее вхождение в диапазоне.
 * - Если значение не найдено, возвращается `nullptr`.
 *
 * @param begin Указатель на начало диапазона памяти,
 *              в котором будет выполняться поиск.
 * @param end Указатель на конец диапазона памяти.
 * @param value Значение, которое нужно найти в диапазоне памяти.
 *
 * @return Указатель на последнее вхождение найденного значения в диапазоне памяти.
 *         Если значение не найдено, возвращается `nullptr`.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c begin или @c end является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
const ae_u64_t *
ae_memory_raw_find_value_rev_u64(const ae_u64_t *begin, const ae_u64_t *end, ae_u64_t value);

/**
 * @brief Обмен значениями двух переменных типа ae_u8_t.
 *
 * Эта функция меняет местами значения двух переменных
 * типа `ae_u8_t` с использованием макроса `ae_memory_raw_swap`.
 *
 * @param lhs Указатель на первую переменную,
 *            чье значение будет обменяно.
 * @param rhs Указатель на вторую переменную,
 *            чье значение будет обменяно.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c begin или @c end является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
void
ae_memory_raw_swap_u8(ae_u8_t *lhs, ae_u8_t *rhs);

/**
 * @brief Обмен значениями двух переменных типа ae_u16_t.
 *
 * Эта функция меняет местами значения двух переменных
 * типа `ae_u16_t` с использованием макроса `ae_memory_raw_swap`.
 *
 * @param lhs Указатель на первую переменную типа `ae_u16_t`,
 *            чье значение будет обменяно.
 * @param rhs Указатель на вторую переменную типа `ae_u16_t`,
 *            чье значение будет обменяно.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c begin или @c end является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
void
ae_memory_raw_swap_u16(ae_u16_t *lhs, ae_u16_t *rhs);

/**
 * @brief Обмен значениями двух переменных типа ae_u32_t.
 *
 * Эта функция меняет местами значения двух переменных
 * типа `ae_u32_t` с использованием макроса `ae_memory_raw_swap`.
 *
 * @param lhs Указатель на первую переменную типа `ae_u32_t`,
 *            чье значение будет обменяно.
 * @param rhs Указатель на вторую переменную типа `ae_u32_t`,
 *            чье значение будет обменяно.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c begin или @c end является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
void
ae_memory_raw_swap_u32(ae_u32_t *lhs, ae_u32_t *rhs);

/**
 * @brief Обмен значениями двух переменных типа ae_u64_t.
 *
 * Эта функция меняет местами значения двух переменных
 * типа `ae_u64_t` с использованием макроса `ae_memory_raw_swap`.
 *
 * @param lhs Указатель на первую переменную типа `ae_u64_t`,
 *            чье значение будет обменяно.
 * @param rhs Указатель на вторую переменную типа `ae_u64_t`,
 *            чье значение будет обменяно.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c begin или @c end является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
void
ae_memory_raw_swap_u64(ae_u64_t *lhs, ae_u64_t *rhs);

AE_COMPILER(EXTERN_C_END)

#endif // AE_MEMORY_RAW_H
