/**
 * @file memory_range_fields.h
 * @brief Заголовочный файл с макросом для определения полей диапазона памяти.
 *
 * Этот файл содержит макрос для определения стандартных полей, необходимых
 * для представления диапазона памяти в структурах данных. Макрос предоставляет
 * унифицированный способ объявления полей указателей на начало и конец диапазона.
 *
 * Основной макрос, определенный в этом файле:
 * - AE_MEMORY_RANGE_FIELDS: создает поля для хранения границ диапазона памяти
 *
 * Типичное использование:
 * @code{.c}
 * struct MyRange {
 *     AE_MEMORY_RANGE_FIELDS(int);  // Создает поля int *begin и int *end
 * };
 * @endcode
 *
 * Преимущества использования:
 * - Единообразное определение полей диапазона памяти
 * - Типобезопасность благодаря использованию шаблонного параметра
 * - Улучшенная читаемость и поддерживаемость кода
 *
 * @note Этот файл является частью базовой инфраструктуры для работы
 *       с диапазонами памяти и часто используется в сочетании с другими
 *       компонентами системы управления памятью.
 *
 * @see ae_memory_range_initializer.h
 */

#ifndef AE_MEMORY_RANGE_FIELDS_H
#define AE_MEMORY_RANGE_FIELDS_H

#include "range_fields.h"

/**
 * @def AE_MEMORY_RANGE_FIELDS(T)
 * @brief Определяет поля для диапазона памяти.
 *
 * Этот макрос создает два поля указателей на тип `T`: `begin` и `end`.
 * Поля представляют начало и конец диапазона памяти, что позволяет
 * удобно работать с массивами или другими структурами данных,
 * представляющими диапазоны.
 *
 * Диапазон памяти позволяет точно указать область памяти, охватываемую указателями,
 * например, для работы с динамически выделенными массивами или фрагментами данных.
 * Макрос генерирует структуру с полями `begin` и `end`, которые могут быть использованы
 * для хранения указателей на начало и конец памяти, что упрощает манипуляции с диапазонами.
 *
 * @param T Тип данных, который будет использоваться для указателей.
 *          Например, `int`, `float`, `char` и другие типы.
 *
 * @note Данный макрос используется для создания диапазонов памяти, в которых указатели
 *       на начало и конец памяти будут иметь тип `T *`, где `T` — это указанный тип данных.
 *
 * Пример использования:
 * @code
 * typedef struct {
 *     AE_MEMORY_RANGE_FIELDS(int)
 * } IntMemoryRange;
 *
 * IntMemoryRange range;
 * range.begin = array;
 * range.end = array + size;
 * @endcode
 */
#define AE_MEMORY_RANGE_FIELDS(T) AE_RANGE_FIELDS(T *)

#endif // AE_MEMORY_RANGE_FIELDS_H
