/**
 * @file byte.h
 * @brief Заголовочный файл, содержащий определения для работы с 8-битными байтами.
 *
 * Этот файл включает в себя определения макросов и типов, связанных с 8-битными байтами.
 * Он предоставляет минимальные и максимальные значения для 8-битного байта,
 * а также определяет тип `ae_byte_t`, который является синонимом для типа `ae_u8_t`.
 *
 * Макросы:
 * - `AE_BYTE_T_MIN` - Минимальное значение для 8-битного байта.
 * - `AE_BYTE_T_MAX` - Максимальное значение для 8-битного байта.
 *
 * Типы:
 * - `ae_byte_t` - Синоним для типа `ae_u8_t`, представляющий 8-битный байт.
 *
 * Этот файл полезен при работе с данными, требующими представления в виде байтов,
 * и используется для повышения читаемости и ясности кода, когда требуется явно указать,
 * что переменная является 8-битным байтом.
 *
 * @see AE_U8_T_MIN
 * @see AE_U8_T_MAX
 * @see ae_u8_t
 */

#ifndef AE_BYTE_H
#define AE_BYTE_H

#include "numeric.h"

/**
 * @def AE_BYTE_T_MIN
 * @brief Минимальное значение для 8-битного байта.
 *
 * Этот макрос является эквивалентом макроса `AE_U8_T_MIN` и определяет
 * минимально возможное значение для 8-битного байта (`ae_byte_t`),
 * которое соответствует минимальному значению для 8-битного беззнакового целого числа.
 *
 * @see AE_U8_T_MIN
 */
#define AE_BYTE_T_MIN AE_U8_T_MIN

/**
 * @def AE_BYTE_T_MAX
 * @brief Максимальное значение для 8-битного байта.
 *
 * Этот макрос является эквивалентом макроса `AE_U8_T_MAX` и определяет
 * максимально возможное значение для 8-битного байта (`ae_byte_t`),
 * которое соответствует максимальному значению для 8-битного беззнакового целого числа.
 *
 * @see AE_U8_T_MAX
 */
#define AE_BYTE_T_MAX AE_U8_T_MAX

/**
 * @typedef ae_byte_t
 * @brief Тип, представляющий 8-битный байт.
 *
 * Этот тип является синонимом для `ae_u8_t`
 * и используется для представления 8-битных байтовых данных.
 *
 * Он может быть использован в тех случаях, когда необходимо явно указать,
 * что переменная представляет собой байт (возможно, со знаком).
 *
 * @see ae_u8_t
 */
typedef ae_u8_t ae_byte_t;

#endif // AE_BYTE_H
