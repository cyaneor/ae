/**
 * @file ptr_util.h
 * @brief Заголовочный файл для работы с указателями и их преобразованиями.
 *
 * Этот файл содержит макросы для безопасной и удобной работы с указателями,
 * включая их преобразование, арифметику, проверку выравнивания и перекрытия
 * диапазонов указателей. Макросы помогают избежать распространенных ошибок,
 * связанных с манипуляциями с адресами в памяти.
 *
 * Основные макросы:
 * - ae_ptr_from_addr: Преобразует адрес в указатель заданного типа.
 * - ae_ptr_to: Преобразует указатель в указатель на другой тип.
 * - ae_ptr_to_addr: Преобразует указатель в адрес.
 * - ae_ptr_to_diff: Преобразует указатель в тип ae_ptrdiff_t.
 * - ae_ptr_diff: Вычисляет разницу между двумя указателями.
 * - ae_ptr_add_offset: Прибавляет смещение к указателю.
 * - ae_ptr_sub_offset: Вычитает смещение из указателя.
 * - ae_ptr_is_aligned: Проверяет выравнивание указателя по заданному значению.
 * - ae_ptr_range_is_aligned: Проверяет выравнивание двух указателей.
 * - ae_ptr_range_overlap_check: Проверяет перекрытие двух диапазонов указателей.
 *
 * @warning Пользователи должны быть осторожны при использовании макросов,
 *          так как неверные преобразования или операции с неинициализированными
 *          указателями могут привести к неопределенному поведению.
 */

#ifndef AE_PTR_UTIL_H
#define AE_PTR_UTIL_H

#include "intptr.h"
#include "nullptr.h"
#include "ptrdiff.h"
#include "static_cast.h"
#include "numeric_util.h"
#include "interval_util.h"

/**
 * @def ae_ptr_from_addr
 * @brief Преобразует адрес в указатель заданного типа.
 *
 * Этот макрос принимает адрес и возвращает указатель на значение
 * заданного типа. Он позволяет безопасно преобразовывать адреса
 * в соответствующие указатели.
 *
 * @param T Тип, к которому следует привести адрес.
 * @param addr Адрес, который необходимо преобразовать в указатель.
 *
 * @return Указатель на значение типа `T`,
 *         соответствующее указанному адресу.
 */
#define ae_ptr_from_addr(T, addr) ((T *)addr)

/**
 * @def ae_ptr_cast
 * @brief Преобразует указатель одного типа в указатель другого типа.
 *
 * Этот макрос выполняет преобразование указателя одного типа в указатель
 * на другой тип. Он полезен при необходимости привести указатель к
 * другому типу, например, для работы с типами в низкоуровневых операциях
 * или для реализации обобщенных алгоритмов.
 *
 * @param T Тип, к которому следует привести указатель.
 * @param ptr Указатель, который необходимо преобразовать.
 *
 * @return Указатель на значение типа `T`,
 *         соответствующее исходному указателю.
 */
#define ae_ptr_cast(T, ptr) ae_static_cast(T *, ptr)

/**
 * @def ae_ptr_to_addr
 * @brief Преобразует указатель в адрес.
 *
 * Этот макрос принимает указатель и возвращает его значение
 * в виде целого числа (адреса) типа `ae_uintptr_t`.
 * Он позволяет легко работать с адресами в виде целых чисел.
 *
 * @param ptr Указатель, который необходимо преобразовать в адрес.
 *
 * @return Адрес, соответствующий указанному указателю в виде
 *         значения типа `ae_uintptr_t`.
 */
#define ae_ptr_to_addr(ptr) ae_static_cast(ae_uintptr_t, ptr)

/**
 * @def ae_ptr_to_diff
 * @brief Преобразует указатель в тип ae_ptrdiff_t.
 *
 * Этот макрос преобразует переданный указатель в тип ae_ptrdiff_t,
 * который обычно используется для хранения разницы между адресами памяти.
 *
 * @param ptr Указатель, который необходимо преобразовать.
 * @return Значение типа ae_ptrdiff_t, представляющее преобразованный указатель.
 */
#define ae_ptr_to_diff(ptr) ae_static_cast(ae_ptrdiff_t, ptr)

/**
 * @def ae_ptr_diff
 * @brief Вычисляет разницу между двумя указателями.
 *
 * Этот макрос принимает два указателя
 * и возвращает разницу между их адресами в виде целого числа.
 * Он позволяет определить, сколько байтов разделяет два указателя.
 *
 * @param ptr1 Первый указатель.
 * @param ptr2 Второй указатель.
 *
 * @return Разница между адресами `ptr1` и `ptr2` в байтах.
 */
#define ae_ptr_diff(ptr1, ptr2) (ae_ptr_to_diff(ptr1) - ae_ptr_to_diff(ptr2))

/**
 * @def ae_addr_diff
 * @brief Вычисляет разницу между двумя указателями в виде адресов.
 *
 * Этот макрос вычисляет разницу между двумя указателями, преобразуя
 * их сначала в адреса с помощью макроса `ae_ptr_to_address`, а затем
 * вычитая один адрес из другого. Это может быть полезно для вычисления
 * смещения между двумя указателями.
 *
 * @param ptr1 Первый указатель, разницу с которым нужно вычислить.
 * @param ptr2 Второй указатель, от которого вычитается первый указатель.
 *
 * @return Разницу между адресами, соответствующими указателям `ptr1` и `ptr2`,
 *         в виде целого числа типа `ae_intptr_t`, которое представляет собой
 *         разницу между двумя адресами.
 */
#define ae_addr_diff(ptr1, ptr2) (ae_ptr_to_addr(ptr1) - ae_ptr_to_addr(ptr2))

/**
 * @def ae_ptr_add_offset_unsafe
 * @brief Прибавляет смещение к указателю без проверки на NULL.
 *
 * Этот макрос выполняет арифметику указателей, прибавляя целочисленное смещение
 * в байтах к адресу указателя, и возвращает новый указатель.
 * Используется для операций с указателями, но не выполняет проверку на NULL.
 *
 * @param ptr Указатель, к которому будет добавлено смещение.
 * @param offset Смещение в байтах, которое будет добавлено к указателю.
 *
 * @return Новый указатель, полученный после прибавления смещения к адресу указателя `ptr`.
 *         Используется без предварительной проверки на NULL, что может привести к ошибкам.
 */
#define ae_ptr_add_offset_unsafe(ptr, offset) ae_ptr_from_addr(void, (ae_ptr_to_addr(ptr) + offset))

/**
 * @def ae_ptr_add_offset
 * @brief Прибавляет смещение к указателю с проверкой на NULL.
 *
 * Этот макрос проверяет, является ли указатель `ptr` ненулевым, и если это так,
 * прибавляет указанное смещение в байтах к адресу указателя. В случае, если указатель
 * равен NULL, возвращает NULL, что предотвращает доступ к памяти по нулевому указателю.
 *
 * @param ptr Указатель, к которому будет добавлено смещение.
 * @param offset Смещение в байтах, которое будет добавлено к указателю.
 *
 * @return Новый указатель, полученный путем прибавления смещения к адресу указателя `ptr`.
 *         Если указатель `ptr` равен NULL, возвращается NULL.
 */
#define ae_ptr_add_offset(ptr, offset) (ptr ? ae_ptr_add_offset_unsafe(ptr, offset) : nullptr)

/**
 * @def ae_ptr_sub_offset_unsafe
 * @brief Вычитает смещение из указателя без проверки на NULL.
 *
 * Этот макрос выполняет арифметику указателей, вычитая целочисленное смещение
 * в байтах из адреса указателя и возвращает новый указатель.
 * Используется для операций с указателями, но не выполняет проверку на NULL.
 *
 * @param ptr Указатель, из которого будет вычитаться смещение.
 * @param offset Смещение в байтах, которое будет вычтено из указателя.
 *
 * @return Новый указатель, полученный после вычитания смещения из адреса указателя `ptr`.
 *         Используется без предварительной проверки на NULL, что может привести к ошибкам.
 */
#define ae_ptr_sub_offset_unsafe(ptr, offset) ae_ptr_from_addr(void, (ae_ptr_to_addr(ptr) - offset))

/**
 * @def ae_ptr_sub_offset
 * @brief Вычитает смещение из указателя с проверкой на NULL.
 *
 * Этот макрос проверяет, является ли указатель `ptr` ненулевым, и если это так,
 * вычитает указанное смещение в байтах из адреса указателя. В случае, если указатель
 * равен NULL, возвращает NULL, что предотвращает доступ к памяти по нулевому указателю.
 *
 * @param ptr Указатель, из которого будет вычитаться смещение.
 * @param offset Смещение в байтах, которое будет вычтено из указателя.
 *
 * @return Новый указатель, полученный путем вычитания смещения из адреса указателя `ptr`.
 *         Если указатель `ptr` равен NULL, возвращается NULL.
 */
#define ae_ptr_sub_offset(ptr, offset) (ptr ? ae_ptr_sub_offset_unsafe(ptr, offset) : nullptr)

/**
 * @def ae_ptr_is_valid_range
 * @brief Проверяет, является ли указатель действительным в пределах заданного интервала.
 *
 * Этот макрос проверяет два условия:
 * 1. Указатель `begin` не является NULL.
 * 2. Интервал, определяемый значениями `begin` и `end`, является валидным,
 *    что проверяется с помощью макроса `ae_interval_is_valid_closed`.
 *
 * Таким образом, данный макрос используется для проверки, что указатель
 * не равен NULL и что интервал, в который он попадает, является валидным.
 *
 * @param begin Начало интервала.
 * @param end Конец интервала.
 *
 * @return Возвращает значение выражения `begin && ae_interval_is_valid_closed(begin, end)`,
 *         что истинно, если указатель `begin` не равен NULL и интервал
 *         с замкнутыми границами валиден.
 *
 * @see ae_interval_is_valid_closed
 */
#define ae_ptr_is_valid_range(begin, end) (begin && ae_interval_is_valid_closed(begin, end))

/**
 * @def ae_ptr_is_valid_ranges
 * @brief Проверяет, что два диапазона указателей являются замкнутыми.
 *
 * Этот макрос использует два диапазона указателей и проверяет,
 * что оба диапазона являются замкнутыми.
 *
 * Это достигается путем проверки того, что оба диапазона являются действительными
 * замкнутыми диапазонами, с помощью макроса `ae_ptr_is_valid_range`.
 *
 * Каждый из диапазонов должен быть замкнутым, что означает,
 * что указатели не равны нулю и что указатель `begin` не больше указателя `end`.
 *
 * @param r1_begin Указатель на начало первого диапазона.
 * @param r1_end Указатель на конец первого диапазона.
 * @param r2_begin Указатель на начало второго диапазона.
 * @param r2_end Указатель на конец второго диапазона.
 *
 * @return Возвращает 1 (истина), если оба диапазона являются замкнутыми
 *         (проверяются с помощью макроса `ae_ptr_is_valid_closed_range`), иначе 0 (ложь).
 */
#define ae_ptr_is_valid_ranges(r1_begin, r1_end, r2_begin, r2_end)                                 \
    (ae_ptr_is_valid_range(r1_begin, r1_end) && ae_ptr_is_valid_range(r2_begin, r2_end))

/**
 * @def ae_ptr_has_range
 * @brief Проверяет, находится ли указатель в пределах заданного интервала.
 *
 * Этот макрос проверяет, находится ли значение указателя `ptr`
 * в пределах интервала, определяемого значениями `begin` и `end`.
 *
 * Для выполнения проверки используется макрос `ae_interval_has_closed`,
 * который проверяет, что указатель лежит внутри интервала
 * с замкнутыми границами (включая обе границы).
 *
 * @param begin Начало интервала.
 * @param end Конец интервала.
 * @param ptr Указатель, значение которого проверяется на принадлежность интервалу.
 *
 * @return Возвращает значение выражения `ae_interval_has_closed(begin, end, ptr)`,
 *         что истинно, если указатель `ptr` лежит в интервале [begin, end], включая границы.
 *
 * @see ae_interval_has_closed
 */
#define ae_ptr_has_range(begin, end, ptr) ae_interval_has_closed(begin, end, ptr)

/**
 * @def ae_ptr_is_aligned
 * @brief Проверяет, выровнен ли указатель по заданному выравниванию.
 *
 * Этот макрос принимает указатель и значение выравнивания,
 * а затем проверяет, выровнен ли адрес, на который указывает
 * указатель, по указанному значению выравнивания.
 *
 * @param ptr Указатель, адрес которого необходимо проверить.
 * @param align Значение выравнивания, с которым нужно сравнить адрес.
 *
 * @return `true`, если адрес, на который указывает `ptr`,
 *         выровнен по `align`; `false` в противном случае.
 *
 * @note Делитель (выравнивание) не должен быть равен нулю,
 *       так как это приведет к неопределенному поведению.
 */
#define ae_ptr_is_aligned(ptr, align) ae_numeric_has_zero_remainder(ae_ptr_to_addr(ptr), align)

/**
 * @def ae_ptr_range_is_aligned
 * @brief Проверяет, выровнены ли оба указателя по заданному выравниванию.
 *
 * Этот макрос принимает два указателя и значение выравнивания,
 * а затем проверяет, выровнены ли адреса, на которые указывают
 * оба указателя, по указанному значению выравнивания.
 *
 * @param ptr1 Первый указатель, адрес которого необходимо проверить.
 * @param ptr2 Второй указатель, адрес которого необходимо проверить.
 * @param align Значение выравнивания, с которым нужно сравнить адреса.
 *
 * @return `true`, если оба адреса, на которые указывают `ptr1` и
 *         `ptr2`, выровнены по `align`; `false` в противном случае.
 *
 * @note Делитель (выравнивание) не должен быть равен нулю,
 *       так как это приведет к неопределенному поведению.
 */
#define ae_ptr_range_is_aligned(ptr1, ptr2, align)                                                 \
    (ae_ptr_is_aligned(ptr1, align) && ae_ptr_is_aligned(ptr2, align))

/**
 * @def ae_ptr_range_is_aligned_both
 * @brief Проверяет, выровнены ли два диапазона указателей по заданному выравниванию.
 *
 * Этот макрос проверяет, выровнены ли оба диапазона указателей по указанному значению выравнивания.
 * Он использует два других макроса: `ae_ptr_range_is_aligned`, чтобы убедиться,
 * что оба диапазона указателей (`lhs` и `rhs`) выровнены по заданному выравниванию.
 *
 * @param lhs Начало первого диапазона указателей.
 * @param lhs_end Конец первого диапазона указателей.
 * @param rhs Начало второго диапазона указателей.
 * @param rhs_end Конец второго диапазона указателей.
 * @param align Значение выравнивания, с которым нужно сравнить адреса.
 *
 * @return `true`, если оба диапазона указателей выровнены по значению `align`;
 *         `false`, если хотя бы один из диапазонов не выровнен.
 *
 * @note Делитель (выравнивание) не должен быть равен нулю,
 *       так как это приведет к неопределенному поведению.
 */
#define ae_ptr_range_is_aligned_both(lhs, lhs_end, rhs, rhs_end, align)                            \
    (ae_ptr_range_is_aligned(lhs, lhs_end, align) && ae_ptr_range_is_aligned(rhs, rhs_end, align))

/**
 * @def ae_ptr_range_is_not_overlapped
 * @brief Проверяет, не перекрываются ли два диапазона.
 *
 * Этот макрос проверяет, не перекрываются ли два диапазона, определяемых
 * указателями. Он использует два диапазона: первый начинается с указателя
 * `lhs_begin`, а второй — с указателя `rhs_begin` и заканчивается на `rhs_end`.
 * Макрос возвращает истинное значение, если диапазоны не пересекаются, и
 * ложное, если они пересекаются.
 *
 * @param lhs_begin Указатель на начало первого диапазона.
 * @param rhs_begin Указатель на начало второго диапазона.
 * @param rhs_end Указатель на конец второго диапазона.
 *
 * @return Возвращает `true`, если диапазоны не перекрываются, иначе — `false`.
 *
 * @note Диапазоны считаются неперекрывающимися, если первый диапазон полностью
 *       идет до второго, либо второй диапазон не пересекается с первым.
 */
#define ae_ptr_range_is_not_overlapped(lhs_begin, rhs_begin, rhs_end)                              \
    ((lhs_begin <= rhs_begin) || (rhs_end <= lhs_begin))

/**
 * @def ae_ptr_range_is_overlapped
 * @brief Проверяет, перекрываются ли два диапазона.
 *
 * Этот макрос проверяет, перекрываются ли два диапазона, определяемых указателями.
 * Он использует два диапазона: первый начинается с указателя `lhs_begin`,
 * а второй — с указателя `rhs_begin` и заканчивается на `rhs_end`.
 *
 * Макрос возвращает истинное значение, если диапазоны перекрываются, и ложное, если они не
 * перекрываются. Макрос использует другой макрос `ae_ptr_range_is_not_overlapped`,
 * который проверяет, что диапазоны не перекрываются.
 *
 * Если результат этого макроса ложный, значит, диапазоны перекрываются,
 * и макрос `ae_ptr_range_is_overlapped` возвращает `true`.
 *
 * @param lhs_begin Указатель на начало первого диапазона.
 * @param rhs_begin Указатель на начало второго диапазона.
 * @param rhs_end Указатель на конец второго диапазона.
 *
 * @return Возвращает `true`, если диапазоны перекрываются,
 *         иначе — `false`.
 */
#define ae_ptr_range_is_overlapped(lhs_begin, rhs_begin, rhs_end)                                  \
    (!ae_ptr_range_is_not_overlapped(lhs_begin, rhs_begin, rhs_end))

#endif // AE_PTR_UTIL_H
