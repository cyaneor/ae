/**
 * @file memory_range.h
 * @brief Заголовочный файл для работы с диапазонами памяти.
 *
 * Этот файл содержит определения и функции для управления диапазонами памяти,
 * представляемыми структурой `ae_memory_range`.
 *
 * Функции позволяют получать доступ к началу и концу диапазона, вычислять его размер,
 * проверять валидность, а также выполнять различные операции, такие как сброс, обмен,
 * проверка на пустоту и принадлежность указателя диапазону.
 *
 * Этот файл также обеспечивает безопасную работу с диапазоном памяти,
 * учитывая безопасность указателей и обработку ошибок с использованием макросов
 * для генерации исключений при ошибках (например, `AE_RUNTIME_ERROR_NULL_POINTER`).
 */

#ifndef AE_MEMORY_RANGE_H
#define AE_MEMORY_RANGE_H

#include "bool.h"
#include "offset.h"
#include "ptrdiff.h"
#include "attribute.h"
#include "memory_range_fields.h"

/**
 * @struct ae_memory_range
 * @brief Структура, представляющая диапазон памяти.
 *
 * Эта структура используется для хранения информации о диапазоне памяти,
 * который включает указатели на начало и конец диапазона.
 */
typedef struct ae_memory_range
{
    AE_MEMORY_RANGE_FIELDS(void);
} ae_memory_range_t;

AE_COMPILER(EXTERN_C_BEGIN)

/**
 * @brief Возвращает указатель на начало области памяти.
 *
 * Эта функция возвращает указатель на начало области памяти,
 * представленной объектом типа @c ae_memory_range_t.
 * Функция проверяет, что указатель на объект не равен NULL.
 * В случае, если указатель равен NULL, генерируется ошибка времени выполнения.
 *
 * @param self Указатель на объект типа @c ae_memory_range_t,
 *             представляющий область памяти.
 * @return Указатель на начало области памяти,
 *         хранимой в @c self.
 *
 * @throws AE_RUNTIME_ERROR_NULL_POINTER
 *         Если @c self является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
void *
ae_memory_range_get_begin(const void *self);

/**
 * @brief Возвращает указатель на конец области памяти.
 *
 * Эта функция возвращает указатель на конец области памяти, представленной объектом типа
 * @c ae_memory_range_t. Функция проверяет, что указатель на объект не равен NULL.
 * В случае, если указатель равен NULL, генерируется ошибка времени выполнения.
 *
 * @param self Указатель на объект типа @c ae_memory_range_t, представляющий область памяти.
 * @return Указатель на конец области памяти, хранимой в @c self.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если @c self является NULL.
 */
AE_ATTRIBUTE(SYMBOL)
void *
ae_memory_range_get_end(const void *self);

/**
 * @brief Проверяет, является ли диапазон памяти нулевым (неинициализированным).
 *
 * Эта функция определяет, является ли диапазон памяти неинициализированным,
 * сравнивая указатель на начало диапазона с указателем на конец диапазона.
 * Если указатели равны, функция возвращает `true`, что указывает на то,
 * что диапазон неинициализирован; в противном случае - `false`.
 *
 * @param self Указатель на структуру ae_memory_range_t, представляющую диапазон памяти.
 * @return `true`, если диапазон памяти пуст (начало равно концу);
 *         `false` в противном случае.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если указатель на `self` равен `nullptr`.
 */
AE_ATTRIBUTE(SYMBOL)
bool
ae_memory_range_is_null(const void *self);

/**
 * @brief Проверяет, является ли диапазон памяти пустым.
 *
 * Эта функция определяет, является ли диапазон памяти пустым, сравнивая
 * указатель на начало диапазона с указателем на конец диапазона. Если указатели равны,
 * функция возвращает `true`, что указывает на то, что диапазон пуст; в противном случае - `false`.
 *
 * @param self Указатель на структуру ae_memory_range_t, представляющую диапазон памяти.
 * @return `true`, если диапазон памяти пуст (начало равно концу);
 *         `false` в противном случае.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если указатель на `self` равен `nullptr`.
 */
AE_ATTRIBUTE(SYMBOL)
bool
ae_memory_range_is_empty(const void *self);

/**
 * @brief Проверяет, является ли диапазон памяти допустимым.
 *
 * Эта функция определяет, является ли диапазон памяти допустимым, проверяя,
 * что указатель на начало и указатель на конец диапазона находятся в допустимых пределах.
 * - Если диапазон пуст, функция также проверяет это условие.
 * - Если указатель `self` равен `nullptr`, функция вызывает ошибку времени выполнения.
 *
 * @param self Указатель на структуру ae_memory_range_t, представляющую диапазон памяти.
 * @return `true`, если диапазон памяти допустим (начало и конец находятся в допустимых пределах);
 *         `false` в противном случае.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если указатель на `self` равен `nullptr`.
 *
 * @note Если диапазон пуст, функция ожидает,
 *       что он будет считаться допустимым.
 */
AE_ATTRIBUTE(SYMBOL)
bool
ae_memory_range_is_valid(const void *self);

/**
 * @brief Проверяет, находится ли указатель в диапазоне памяти.
 *
 * Эта функция определяет,
 * находится ли заданный указатель в пределах указанного диапазона памяти.
 *
 * @param self Указатель на структуру ae_memory_range_t, представляющую диапазон памяти.
 * @param ptr Указатель, который необходимо проверить на принадлежность диапазону.
 *
 * @return `true`, если указатель находится в диапазоне памяти;
 *         `false` в противном случае.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если указатель на `self` равен `nullptr`.
 * @throw AE_RUNTIME_ERROR_INVALID_MEMORY_RANGE
 *        Если диапазон памяти недопустим
 *        (например, если `self` не является валидным диапазоном).
 */
AE_ATTRIBUTE(SYMBOL)
bool
ae_memory_range_has_ptr(const void *self, const void *ptr);

/**
 * @brief Вычисляет разницу между конечным и начальным адресами диапазона памяти.
 *
 * Эта функция определяет разницу между указателями на конец и начало диапазона памяти.
 * Если указатель `self` равен `nullptr`, функция вызывает ошибку времени выполнения.
 *
 * @param self Указатель на структуру ae_memory_range_t, представляющую диапазон памяти.
 * @return Разница между конечным и начальным адресами диапазона памяти в байтах.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если указатель на `self` равен `nullptr`.
 */
AE_ATTRIBUTE(SYMBOL)
ae_ptrdiff_t
ae_memory_range_diff(const void *self);

/**
 * @brief Вычисляет размер диапазона памяти.
 *
 * Эта функция определяет размер диапазона памяти,
 * используя разницу между конечным и начальным адресами.
 * Если диапазон памяти недопустим, функция вызывает ошибку времени выполнения.
 *
 * @param self Указатель на структуру ae_memory_range_t,
 *             представляющую диапазон памяти.
 * @return Размер диапазона памяти в байтах.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если указатель на `self` равен `nullptr`.
 * @throw AE_RUNTIME_ERROR_INVALID_MEMORY_RANGE
 *        Если диапазон памяти недопустим
 *        (например, если `self` не является валидным диапазоном).
 */
AE_ATTRIBUTE(SYMBOL)
ae_usize_t
ae_memory_range_size(const void *self);

/**
 * @brief Проверяет, выровнен ли диапазон памяти.
 *
 * Данная функция проверяет, выровнен ли указанный диапазон памяти относительно
 * указанного выравнивания. Для этого она извлекает начало и конец диапазона
 * памяти, а затем вызывает функцию для проверки выравнивания указанных границ.
 *
 * @param self Указатель на структуру или объект, содержащий диапазон памяти.
 * @param alignment_size Требуемое выравнивание в байтах. Не может быть равно нулю.
 *
 * @return `true`, если диапазон памяти выровнен относительно указанного выравнивания,
 *         иначе `false`.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если указатель на `self` равен `nullptr`.
 * @throw AE_RUNTIME_ERROR_ZERO_ALIGNMENT_SIZE
 *        Если значение выравнивания равно нулю.
 */
AE_ATTRIBUTE(SYMBOL)
bool
ae_memory_range_is_aligned(const void *self, ae_usize_t alignment_size);

/**
 * @brief Проверяет, является ли размер диапазона
 *        памяти кратным заданному размеру элемента.
 *
 * Эта функция вычисляет размер диапазона памяти и проверяет,
 * является ли он кратным заданному размеру элемента.
 *
 * Если размер диапазона памяти не кратен размеру элемента,
 * функция возвращает `false`, в противном случае - `true`.
 *
 * @param self Указатель на структуру ae_memory_range_t,
 *             представляющую диапазон памяти.
 * @param element_size Размер элемента,
 *                     с которым будет производиться проверка кратности.
 * @return `true`, если размер диапазона памяти кратен размеру элемента;
 *         `false` в противном случае.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если указатель на `self` равен `nullptr`.
 * @throw AE_RUNTIME_ERROR_DIVISION_BY_ZERO
 *        Если `element_size` равен нулю.
 * @throw AE_RUNTIME_ERROR_INVALID_MEMORY_RANGE
 *        Если диапазон памяти недопустим
 *        (например, если `self` не является валидным диапазоном).
 */
AE_ATTRIBUTE(SYMBOL)
bool
ae_memory_range_is_multiple_of_size(const void *self, ae_usize_t element_size);

/**
 * @brief Устанавливает указатель на начало диапазона памяти.
 *
 * Эта функция используется для установки указателя
 * на начало диапазона в структуре @ref ae_memory_range_t.
 *
 * @param self Указатель на структуру @ref ae_memory_range_t,
 *             для которой необходимо установить начало диапазона памяти.
 * @param ptr Указатель на начало диапазона памяти.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если указатель на `self` равен `nullptr`.
 */
AE_ATTRIBUTE(SYMBOL)
void
ae_memory_range_set_begin(void *self, void *ptr);

/**
 * @brief Устанавливает указатель на конец диапазона памяти.
 *
 * Эта функция используется для установки указателя
 * на конец диапазона в структуре @ref ae_memory_range_t.
 *
 * @param self Указатель на структуру @ref ae_memory_range_t,
 *             для которой необходимо установить конец диапазона памяти.
 * @param ptr Указатель на конец диапазона памяти.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если указатель на `self` равен `nullptr`.
 */
AE_ATTRIBUTE(SYMBOL)
void
ae_memory_range_set_end(void *self, void *ptr);

/**
 * @brief Устанавливает начальный и конечный адреса диапазона памяти.
 *
 * Эта функция инициализирует диапазон памяти,
 * устанавливая указатели на начало и конец.
 *
 * @param self Указатель на структуру ae_memory_range_t, представляющую диапазон памяти.
 * @param begin Указатель на начало диапазона памяти.
 * @param end Указатель на конец диапазона памяти.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если указатель на `self` равен `nullptr`.
 */
AE_ATTRIBUTE(SYMBOL)
void
ae_memory_range_set(void *self, void *begin, void *end);

/**
 * @brief Копирует диапазон памяти из одной структуры в другую.
 *
 * Эта функция присваивает диапазон памяти, указанный в структуре `other`,
 * текущему диапазону памяти, представленному структурой `self`.
 *
 * @param self Указатель на структуру ae_memory_range_t,
 *             представляющую целевой диапазон памяти.
 * @param other Указатель на структуру ae_memory_range_t,
 *              представляющую источник диапазона памяти.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если указатель на `self` или `other` равен `nullptr`.
 */
AE_ATTRIBUTE(SYMBOL)
void
ae_memory_range_assign(void *self, const void *other);

/**
 * @brief Очищает диапазон памяти, устанавливая его в пустое состояние.
 *
 * Эта функция сбрасывает диапазон памяти,
 * присваивая ему значения, соответствующие пустому диапазону.
 *
 * @param self Указатель на структуру ae_memory_range_t,
 *             представляющую диапазон памяти, который необходимо очистить.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если указатель на `self` равен `nullptr`.
 */
AE_ATTRIBUTE(SYMBOL)
void
ae_memory_range_clear(void *self);

/**
 * @brief Копирует диапазон памяти из одной структуры
 *        в другую с проверкой на допустимость.
 *
 * Эта функция присваивает диапазон памяти, указанный в структуре `other`,
 * текущему диапазону памяти, представленному структурой `self`,
 * после проверки, что диапазон `other` является допустимым.
 *
 * @param self Указатель на структуру ae_memory_range_t,
 *             представляющую целевой диапазон памяти.
 * @param other Указатель на структуру ae_memory_range_t,
 *              представляющую источник диапазона памяти.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если указатель на `self` или `other` равен `nullptr`.
 * @throw AE_RUNTIME_ERROR_INVALID_MEMORY_RANGE
 *        Если диапазон памяти `other` недопустим.
 */
AE_ATTRIBUTE(SYMBOL)
void
ae_memory_range_assign_with_validate(void *self, const void *other);

/**
 * @brief Устанавливает начальный и конечный адреса
 *        диапазона памяти с проверкой на допустимость.
 *
 * Эта функция инициализирует новый диапазон памяти с заданными указателями на начало и конец,
 * а затем присваивает его текущему диапазону памяти, представленному структурой `self`,
 * после проверки на допустимость.
 *
 * @param self Указатель на структуру ae_memory_range_t,
 *             представляющую диапазон памяти, который необходимо установить.
 * @param begin Указатель на начало диапазона памяти.
 * @param end Указатель на конец диапазона памяти.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если указатель на `self` равен `nullptr`.
 * @throw AE_RUNTIME_ERROR_INVALID_MEMORY_RANGE
 *        Если создаваемый диапазон памяти недопустим.
 */
AE_ATTRIBUTE(SYMBOL)
void
ae_memory_range_set_with_validate(void *self, void *begin, void *end);

/**
 * @brief Устанавливает диапазон памяти
 *        с заданным начальным адресом и размером в байтах.
 *
 * Эта функция инициализирует диапазон памяти, устанавливая указатель
 * на начало и вычисляя конечный адрес на основе заданного размера в байтах.
 *
 * @param self Указатель на структуру ae_memory_range_t,
 *             представляющую диапазон памяти,
 *             который необходимо установить.
 * @param begin Указатель на начало диапазона памяти.
 * @param size Размер диапазона памяти в байтах.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если указатель на `self` равен `nullptr`.
 * @throw AE_RUNTIME_ERROR_INVALID_ARGUMENT
 *        Если указатель `begin` равен `nullptr`.
 * @throw AE_RUNTIME_ERROR_INVALID_MEMORY_RANGE
 *        Если создаваемый диапазон памяти недопустим.
 */
AE_ATTRIBUTE(SYMBOL)
void
ae_memory_range_set_with_size(void *self, void *begin, ae_usize_t size);

/**
 * @brief Устанавливает диапазон памяти с заданным начальным адресом
 *        и размером в байтах или очищает его.
 *
 * Эта функция устанавливает диапазон памяти, используя указатель на начало и размер в байтах.
 * Если указатель `begin` равен `nullptr`, функция очищает диапазон памяти,
 * устанавливая его в пустое состояние.
 *
 * @param self Указатель на структуру ae_memory_range_t,
 *             представляющую диапазон памяти, который необходимо установить или очистить.
 * @param begin Указатель на начало диапазона памяти.
 * @param size Размер диапазона памяти в байтах.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если указатель на `self` равен `nullptr`.
 */
AE_ATTRIBUTE(SYMBOL)
void
ae_memory_range_set_with_fallback(void *self, void *begin, ae_usize_t size);

/**
 * @brief Обменивает значения двух диапазонов памяти.
 *
 * Эта функция меняет местами содержимое двух диапазонов памяти,
 * представленных структурами `self` и `other`.
 *
 * @param self Указатель на структуру ae_memory_range_t,
 *             представляющую первый диапазон памяти.
 * @param other Указатель на структуру ae_memory_range_t,
 *              представляющую второй диапазон памяти.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если указатель на `self` равен `nullptr`.
 * @throw AE_RUNTIME_ERROR_NULL_POINTER_AT_OTHER
 *        Если указатель на `other` равен `nullptr`.
 */
AE_ATTRIBUTE(SYMBOL)
void
ae_memory_range_swap(void *self, void *other);

/**
 * @brief Обменивает значения двух диапазонов памяти с предварительной очисткой.
 *
 * Эта функция сначала очищает диапазон памяти, представленный структурой `self`,
 * а затем меняет местами содержимое этого диапазона с содержимым диапазона,
 * представленным структурой `other`.
 *
 * @param self Указатель на структуру ae_memory_range_t,
 *             представляющую диапазон памяти, который будет очищен и обменен.
 * @param other Указатель на структуру ae_memory_range_t,
 *              представляющую диапазон памяти, с которым будет произведен обмен.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если указатель на `self` равен `nullptr`.
 * @throw AE_RUNTIME_ERROR_NULL_POINTER_AT_OTHER
 *        Если указатель на `other` равен `nullptr`.
 */
AE_ATTRIBUTE(SYMBOL)
void
ae_memory_range_exchange(void *self, void *other);

/**
 * @brief Проверяет, находится ли заданный диапазон в пределах текущего диапазона памяти.
 *
 * Эта функция определяет, находится ли указанный диапазон,
 * заданный указателями `begin` и `end`, внутри текущего диапазона памяти.
 *
 * @param self Указатель на структуру ae_memory_range_t,
 *             представляющую текущий диапазон памяти.
 * @param begin Указатель на начало проверяемого диапазона.
 * @param end Указатель на конец проверяемого диапазона.
 * @return `true`, если указанный диапазон находится в пределах текущего диапазона памяти;
 *         `false` в противном случае.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если указатель на `self` равен `nullptr`.
 * @throw AE_RUNTIME_ERROR_INVALID_MEMORY_RANGE
 *        Если диапазон памяти недопустим
 *        (например, если `self` не является валидным диапазоном).
 */
AE_ATTRIBUTE(SYMBOL)
bool
ae_memory_range_has_range(const void *self, const void *begin, const void *end);

/**
 * @brief Проверяет, находится ли смещение в пределах диапазона памяти.
 *
 * Эта функция проверяет, что переданное смещение не превышает общий размер
 * диапазона памяти, вычисленный с помощью функции `ae_memory_range_total_size`.
 *
 * @param self Указатель на структуру `ae_memory_range_t`, представляющую диапазон памяти.
 * @param offset Смещение, которое нужно проверить в диапазоне памяти.
 * @return `true`, если смещение находится в пределах диапазона памяти; иначе `false`.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если указатель на `self` равен `nullptr`.
 * @throw AE_RUNTIME_ERROR_INVALID_MEMORY_RANGE
 *        Если диапазон памяти недопустим
 *        (например, если `self` не является валидным диапазоном).
 */
AE_ATTRIBUTE(SYMBOL)
bool
ae_memory_range_has_offset(const void *self, ae_uoffset_t offset);

/**
 * @brief Получает указатель на элемент в диапазоне памяти
 *        по заданному смещению с проверкой на допустимость.
 *
 * Эта функция возвращает указатель на элемент в диапазоне памяти, заданном структурой `self`,
 * с учетом указанного смещения `offset`. Перед возвратом указателя функция проверяет,
 * находится ли полученный указатель в пределах допустимого диапазона.
 * Если указатель выходит за пределы, функция вызывает ошибку времени выполнения.
 *
 * @param self Указатель на структуру ae_memory_range_t,
 *             представляющую диапазон памяти.
 * @param offset Смещение в байтах от начала диапазона памяти.
 * @return Указатель на элемент в диапазоне памяти,
 *         находящийся на заданном смещении.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если указатель на `self` равен `nullptr`.
 * @throw AE_RUNTIME_ERROR_OUT_OF_RANGE
 *        Если полученный указатель выходит за пределы допустимого диапазона памяти.
 * @throw AE_RUNTIME_ERROR_INVALID_MEMORY_RANGE
 *        Если диапазон памяти недопустим
 *        (например, если `self` не является валидным диапазоном).
 */
AE_ATTRIBUTE(SYMBOL)
void *
ae_memory_range_at_from_begin(const void *self, ae_uoffset_t offset);

/**
 * @brief Получает указатель на элемент в диапазоне памяти
 *        по заданному смещению с конца диапазона.
 *
 * Эта функция возвращает указатель на элемент в диапазоне памяти, заданном структурой `self`,
 * с учетом указанного смещения `offset` от конца диапазона. Смещение интерпретируется так,
 * что значение 0 указывает на последний элемент диапазона памяти.
 * Для вычисления позиции элемента функция использует общий размер диапазона памяти,
 * вычисляемый с помощью `ae_memory_range_total_size()`. После этого смещение
 * применяется для нахождения нужного элемента.
 *
 * @param self Указатель на структуру ae_memory_range_t,
 *             представляющую диапазон памяти.
 * @param offset Смещение в байтах от конца диапазона памяти.
 * @return Указатель на элемент в диапазоне памяти,
 *         находящийся на заданном смещении от конца.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если указатель на `self` равен `nullptr`.
 * @throw AE_RUNTIME_ERROR_OUT_OF_RANGE
 *        Если полученный указатель выходит за пределы допустимого диапазона памяти.
 * @throw AE_RUNTIME_ERROR_INVALID_MEMORY_RANGE
 *        Если диапазон памяти недопустим
 *        (например, если `self` не является валидным диапазоном).
 */
AE_ATTRIBUTE(SYMBOL)
void *
ae_memory_range_at_from_end(const void *self, ae_uoffset_t offset);

/**
 * @brief Получает указатель на элемент в диапазоне памяти
 *        по заданному смещению с учетом направления поиска.
 *
 * Эта функция возвращает указатель на элемент в диапазоне памяти,
 * заданном структурой `self`, в зависимости от параметра `reversed`.
 *
 * - Если параметр `reversed` равен `true`,
 *   функция использует `ae_memory_range_at_from_begin()` для поиска элемента с начала диапазона.
 * - Если параметр `reversed` равен `false`,
 *   функция использует `ae_memory_range_at_from_end()` для поиска элемента с конца диапазона.
 *
 * @param self Указатель на структуру `ae_memory_range_t`,
 *             представляющую диапазон памяти.
 * @param offset Смещение в байтах от начала или конца диапазона памяти
 *               в зависимости от параметра `reversed`.
 * @param reversed Флаг, указывающий направление поиска:
 *                 - `true` для поиска с начала диапазона.
 *                 - `false` для поиска с конца диапазона.
 *
 * @return Указатель на элемент в диапазоне памяти,
 *         находящийся на заданном смещении.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если указатель на `self` равен `nullptr`.
 * @throw AE_RUNTIME_ERROR_OUT_OF_RANGE
 *        Если полученный указатель выходит за пределы допустимого диапазона памяти.
 * @throw AE_RUNTIME_ERROR_INVALID_MEMORY_RANGE
 *        Если диапазон памяти недопустим
 *        (например, если `self` не является валидным диапазоном).
 */
AE_ATTRIBUTE(SYMBOL)
void *
ae_memory_range_at(const void *self, ae_uoffset_t offset, bool reversed);

/**
 * @brief Получает указатель на первый элемент в диапазоне памяти.
 *
 * Эта функция возвращает указатель на первый элемент в диапазоне памяти,
 * заданном структурой `self`.
 *
 * Функция использует `ae_memory_range_at()` для получения указателя,
 * передавая смещение 0 и устанавливая флаг `reversed` в `false`,
 * что соответствует поиску с начала диапазона памяти.
 *
 * @param self Указатель на структуру `ae_memory_range_t`,
 *             представляющую диапазон памяти.
 * @return Указатель на первый элемент в диапазоне памяти.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если указатель на `self` равен `nullptr`.
 * @throw AE_RUNTIME_ERROR_OUT_OF_RANGE
 *        Если полученный указатель выходит за пределы допустимого диапазона памяти.
 * @throw AE_RUNTIME_ERROR_INVALID_MEMORY_RANGE
 *        Если диапазон памяти недопустим
 *        (например, если `self` не является валидным диапазоном).
 */
AE_ATTRIBUTE(SYMBOL)
void *
ae_memory_range_front(const void *self);

/**
 * @brief Получает указатель на последний элемент в диапазоне памяти.
 *
 * Эта функция возвращает указатель на последний элемент в диапазоне памяти,
 * заданном структурой `self`.
 *
 * Функция использует `ae_memory_range_at()` для получения указателя,
 * передавая смещение 0 и устанавливая флаг `reversed` в `true`,
 * что соответствует поиску с конца диапазона памяти.
 *
 * @param self Указатель на структуру `ae_memory_range_t`,
 *             представляющую диапазон памяти.
 * @return Указатель на последний элемент в диапазоне памяти.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если указатель на `self` равен `nullptr`.
 * @throw AE_RUNTIME_ERROR_OUT_OF_RANGE
 *        Если полученный указатель выходит за пределы допустимого диапазона памяти.
 * @throw AE_RUNTIME_ERROR_INVALID_MEMORY_RANGE
 *        Если диапазон памяти недопустим
 *        (например, если `self` не является валидным диапазоном).
 */
AE_ATTRIBUTE(SYMBOL)
void *
ae_memory_range_back(const void *self);

/**
 * @brief Проверяет, равен ли указатель
 *        на начало диапазона памяти заданному указателю.
 *
 * Эта функция сравнивает указатель, указывающий на начало диапазона памяти,
 * с заданным указателем. Если указатели равны, функция возвращает `true`,
 * в противном случае - `false`.
 *
 * @param self Указатель на структуру ae_memory_range_t, представляющую диапазон памяти.
 * @param ptr Указатель, с которым будет производиться сравнение.
 * @return `true`, если указатель на начало диапазона равен заданному указателю;
 *         `false` в противном случае.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если указатель на `self` равен `nullptr`.
 */
AE_ATTRIBUTE(SYMBOL)
bool
ae_memory_range_is_begin_equal_to(const void *self, const void *ptr);

/**
 * @brief Проверяет, равен ли указатель
 *        на конец диапазона памяти заданному указателю.
 *
 * Эта функция сравнивает указатель, указывающий на конец диапазона памяти,
 * с заданным указателем. Если указатели равны, функция возвращает `true`,
 * в противном случае - `false`.
 *
 * @param self Указатель на структуру ae_memory_range_t, представляющую диапазон памяти.
 * @param ptr Указатель, с которым будет производиться сравнение.
 * @return `true`, если указатель на конец диапазона равен заданному указателю;
 *         `false` в противном случае.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если указатель на `self` равен `nullptr`.
 */
AE_ATTRIBUTE(SYMBOL)
bool
ae_memory_range_is_end_equal_to(const void *self, const void *ptr);

/**
 * @brief Проверяет, равны ли указатели на начало диапазонов памяти.
 *
 * Эта функция сравнивает указатель на начало диапазона памяти текущего объекта
 * с указателем на начало диапазона памяти другого объекта. Если указатели равны,
 * функция возвращает `true`, в противном случае - `false`.
 *
 * @param self Указатель на структуру ae_memory_range_t,
 *             представляющую первый диапазон памяти.
 * @param other Указатель на структуру ae_memory_range_t,
 *              представляющую второй диапазон памяти.
 * @return `true`, если указатель на начало диапазона первого объекта равен указателю
 *                 на начало диапазона второго объекта; `false` в противном случае.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если указатель на `self` или `other` равен `nullptr`.
 */
AE_ATTRIBUTE(SYMBOL)
bool
ae_memory_range_is_begin_equal(const void *self, const void *other);

/**
 * @brief Проверяет, равны ли указатели на начало диапазонов памяти.
 *
 * Эта функция сравнивает указатель на начало диапазона памяти текущего объекта
 * с указателем на начало диапазона памяти другого объекта. Если указатели равны,
 * функция возвращает `true`, в противном случае - `false`.
 *
 * @param self Указатель на структуру ae_memory_range_t,
 *             представляющую первый диапазон памяти.
 * @param other Указатель на структуру ae_memory_range_t,
 *              представляющую второй диапазон памяти.
 * @return `true`, если указатель на начало диапазона первого объекта равен указателю
 *          на начало диапазона второго объекта; `false` в противном случае.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если указатель на `self` или `other` равен `nullptr`.
 */
AE_ATTRIBUTE(SYMBOL)
bool
ae_memory_range_is_end_equal(const void *self, const void *other);

/**
 * @brief Проверяет, равны ли два диапазона памяти.
 *
 * Эта функция сравнивает указатели на начало и конец двух диапазонов памяти.
 * Если оба указателя (на начало и конец) равны, функция возвращает `true`,
 * в противном случае - `false`.
 *
 * @param self Указатель на структуру ae_memory_range_t,
 *             представляющую первый диапазон памяти.
 * @param other Указатель на структуру ae_memory_range_t,
 *              представляющую второй диапазон памяти.
 * @return `true`, если оба диапазона памяти равны (начало и конец);
 *         `false` в противном случае.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если указатель на `self` или `other` равен `nullptr`.
 */
AE_ATTRIBUTE(SYMBOL)
bool
ae_memory_range_is_equal(const void *self, const void *other);

/**
 * @brief Создает и возвращает пустой диапазон памяти.
 *
 * Эта функция инициализирует новый диапазон памяти
 * с использованием макроса `ae_memory_range_empty_initializer`,
 * устанавливая его начальную и конечную точки в `nullptr`,
 * что делает диапазон пустым.
 *
 * @return Возвращает пустой диапазон памяти типа `ae_memory_range_t`.
 *
 * @note Эта функция может быть использована для создания и работы
 *       с пустыми диапазонами памяти, когда фактические границы
 *       диапазона еще не определены.
 */
AE_ATTRIBUTE(SYMBOL)
ae_memory_range_t
ae_memory_range_make_empty();

/**
 * @brief Создает диапазон памяти.
 *
 * Эта функция создает объект диапазона памяти,
 * который включает указатели на начало и конец диапазона.
 *
 * Она также выполняет проверку на корректность диапазона памяти и генерирует ошибку,
 * если диапазон не является валидным.
 *
 * @param begin Указатель на начало диапазона памяти.
 * @param end Указатель на конец диапазона памяти.
 *
 * @return Структура типа @ref ae_memory_range_t,
 *         представляющая диапазон памяти.
 *
 * @throw AE_RUNTIME_ERROR_INVALID_RANGE
 *        Если диапазон невалиден.
 */
AE_ATTRIBUTE(SYMBOL)
ae_memory_range_t
ae_memory_range_make(void *begin, void *end);

/**
 * @brief Создает поддиапазон памяти на основе заданных границ.
 *
 * Эта функция создает новый диапазон памяти, используя указанные значения `begin` и `end`.
 * Перед созданием поддиапазона выполняется проверка, находится ли указанный диапазон
 * (от `begin` до `end`) в пределах текущего диапазона памяти, представленного в `self`.
 * Если диапазон выходит за пределы, генерируется ошибка.
 *
 * @param self Указатель на структуру `ae_memory_range_t`,
 *             представляющую текущий диапазон памяти.
 * @param begin Указатель на начало нового поддиапазона памяти.
 * @param end Указатель на конец нового поддиапазона памяти.
 *
 * @return Новый диапазон памяти типа `ae_memory_range_t`,
 *         представляющий поддиапазон в пределах указанного диапазона.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если указатель на `self` равен `nullptr`.
 * @throw AE_RUNTIME_ERROR_OUT_OF_RANGE
 *        Если указанный диапазон (от `begin` до `end`)
 *        выходит за пределы текущего диапазона памяти.
 * @throw AE_RUNTIME_ERROR_INVALID_MEMORY_SUBRANGE
 *        Если поддиапазон памяти недопустим или некорректен.
 */
AE_ATTRIBUTE(SYMBOL)
ae_memory_range_t
ae_memory_range_make_subrange(void *self, void *begin, void *end);

/**
 * @brief Создает поддиапазон памяти из текущего диапазона, начиная с указанного индекса.
 *
 * Эта функция создает новый диапазон памяти, используя исходный диапазон,
 * представленный в параметре `self`, и срез, определяемый значениями индекса и длины.
 * Функция возвращает новый диапазон памяти, который является поддиапазоном текущего диапазона.
 *
 * @param self Указатель на структуру `ae_memory_range_t`, представляющую текущий диапазон памяти.
 * @param index Индекс начала поддиапазона относительно текущего диапазона памяти.
 * @param size Размер диапазона памяти в байтах.
 *
 * @return Новый диапазон памяти типа `ae_memory_range_t`,
 *         представляющий срез текущего диапазона.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если указатель на `self` равен `nullptr`.
 * @throw AE_RUNTIME_ERROR_OUT_OF_RANGE
 *        Если указанный диапазон (от `index` до `index + size`)
 *        выходит за пределы текущего диапазона памяти.
 * @throw AE_RUNTIME_ERROR_INVALID_MEMORY_RANGE
 *        Если диапазон памяти недопустим
 *        (например, если `self` не является валидным диапазоном).
 * @throw AE_RUNTIME_ERROR_INVALID_MEMORY_SUBRANGE
 *        Если поддиапазон памяти недопустим или некорректен.
 */
AE_ATTRIBUTE(SYMBOL)
ae_memory_range_t
ae_memory_range_slice(void *self, ae_uoffset_t index, ae_usize_t size);

/**
 * @brief Вставляет значение в диапазон памяти по заданному индексу.
 *
 * Эта функция вставляет указанное значение в диапазон памяти,
 * представленный структурой `self`, по индексу `index`.
 *
 * Если операция успешна, значение будет сохранено по указанному индексу,
 * и будет выполнена проверка на корректность работы с памятью.
 * В случае ошибки выполнения будет вызвано исключение.
 *
 * @param self Указатель на структуру, представляющую диапазон памяти.
 * @param offset Смещение в диапазоне памяти, в который будет вставлено значение.
 * @param value Значение, которое нужно вставить в память.
 *
 * @return Указатель на элемент в диапазоне памяти,
 *         в который было вставлено значение.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если указатель на `self` равен `nullptr`.
 * @throw AE_RUNTIME_ERROR_OUT_OF_RANGE
 *        Если указанный индекс выходит за пределы допустимого диапазона памяти.
 * @throw AE_RUNTIME_ERROR_INVALID_MEMORY_RANGE
 *        Если диапазон памяти недопустим или некорректен.
 */
AE_ATTRIBUTE(SYMBOL)
void *
ae_memory_range_insert_value(void *self, ae_uoffset_t offset, ae_u8_t value);

/**
 * @brief Вставляет значения в диапазон памяти.
 *
 * Эта функция вставляет значения из диапазона `[begin, end)` в память, начиная с указанного
 * смещения и размера. Функция проверяет диапазоны памяти и выполняет перемещение данных с
 * использованием вспомогательной функции для манипуляции сырыми байтами.
 *
 * @param self Указатель на объект, в памяти которого будет производиться вставка значений.
 * @param offset Смещение в памяти, с которого начинается вставка.
 * @param size Размер памяти, в которую будут вставлены данные.
 * @param begin Указатель на начало диапазона данных, которые необходимо вставить.
 * @param end Указатель на конец диапазона данных, которые необходимо вставить.
 *
 * @return Возвращает указатель на объект памяти после выполнения вставки значений.
 *
 * @throw AE_RUNTIME_ERROR_NULL_POINTER
 *        Если указатель на `self` равен `nullptr`.
 * @throw AE_RUNTIME_ERROR_OUT_OF_RANGE
 *        Если указанный индекс выходит за пределы допустимого диапазона памяти.
 * @throw AE_RUNTIME_ERROR_INVALID_MEMORY_RANGE
 *        Если диапазон памяти недопустим или некорректен.
 */
AE_ATTRIBUTE(SYMBOL)
void *
ae_memory_range_insert_values(void        *self,
                              ae_uoffset_t offset,
                              ae_usize_t   size,
                              void        *begin,
                              void        *end);

AE_COMPILER(EXTERN_C_END)

#endif // AE_MEMORY_RANGE_H
