/**
 * @file numeric_fixed_types.h
 * @brief Этот файл содержит определения компактных числовых типов
 *        и статические проверки для их размеров.
 *
 * В данном файле определены псевдонимы для знаковых и беззнаковых целочисленных типов различных
 * размеров: 8, 16, 32 и 64 бита. Эти типы используются для обеспечения переносимости и
 * согласованности в работе с целочисленными данными на различных платформах.
 *
 * Также предусмотрены статические проверки, которые гарантируют,
 * что размеры этих типов соответствуют ожидаемым:
 * - ae_u8_t (беззнаковый 8-битный тип)
 * - ae_s8_t (знаковый 8-битный тип)
 * - ae_u16_t (беззнаковый 16-битный тип)
 * - ae_s16_t (знаковый 16-битный тип)
 * - ae_u32_t (беззнаковый 32-битный тип)
 * - ae_s32_t (знаковый 32-битный тип)
 * - ae_u64_t (беззнаковый 64-битный тип)
 * - ae_s64_t (знаковый 64-битный тип)
 *
 * При компиляции также выполняются статические проверки для гарантии,
 * что:
 * - Размер ae_u8_t равен 1 байту.
 * - Размер ae_u16_t равен 2 байтам.
 * - Размер ae_u32_t равен 4 байтам.
 * - Размер ae_u64_t равен 8 байтам.
 *
 * Если компилятор поддерживает 128-битные целочисленные типы,
 * то также могут быть определены:
 * - ae_s128_t (знаковый 128-битный тип)
 * - ae_u128_t (беззнаковый 128-битный тип)
 *
 * Эти типы обеспечивают использование целых чисел с размером 128 бит,
 * если это поддерживает архитектура и компилятор.
 *
 * Пример использования:
 * @code
 * ae_u8_t var_u8 = 255;
 * ae_s16_t var_s16 = -32000;
 * ae_u128_t var_u128 = 12345678901234567890U;
 * @endcode
 *
 * Этот файл способствует улучшению переносимости кода на разные платформы,
 * позволяя использовать компактные числовые типы с гарантированными размерами.
 */

#ifndef AE_NUMERIC_FIXED_TYPES_H
#define AE_NUMERIC_FIXED_TYPES_H

#include "numeric_types.h"
#include "static_assert.h"

/**
 * @typedef ae_u8_t
 * @brief Псевдоним для 8-битного беззнакового целого числа (ae_uchar_t).
 */
typedef ae_uchar_t ae_u8_t;

/**
 * @typedef ae_s8_t
 * @brief Псевдоним для 8-битного знакового целого числа (ae_schar_t).
 */
typedef ae_schar_t ae_s8_t;

/**
 * @typedef ae_u16_t
 * @brief Псевдоним для 16-битного беззнакового целого числа (ae_ushort_t).
 */
typedef ae_ushort_t ae_u16_t;

/**
 * @typedef ae_s16_t
 * @brief Псевдоним для 16-битного знакового целого числа (ae_sshort_t).
 */
typedef ae_sshort_t ae_s16_t;

/**
 * @typedef ae_u32_t
 * @brief Псевдоним для 32-битного беззнакового целого числа (ae_uint_t).
 */
typedef ae_uint_t ae_u32_t;

/**
 * @typedef ae_s32_t
 * @brief Псевдоним для 32-битного знакового целого числа (ae_sint_t).
 */
typedef ae_sint_t ae_s32_t;

/**
 * @typedef ae_u64_t
 * @brief Псевдоним для 64-битного беззнакового целого числа (ae_ullong_t).
 */
typedef ae_ullong_t ae_u64_t;

/**
 * @typedef ae_s64_t
 * @brief Псевдоним для 64-битного знакового целого числа (ae_sllong_t).
 */
typedef ae_sllong_t ae_s64_t;

#if defined(AE_INT128_T_SIZE) && AE_INT128_T_SIZE == 16
/**
 * @typedef ae_s128_t
 * @brief Тип данных для знакового 128-битного целого числа.
 *
 * Этот тип определён, если компилятор поддерживает тип __int128.
 * Используется для представления целых чисел с 128 битами знака.
 *
 * Пример:
 * @code
 * ae_s128_t var = 12345678901234567890;
 * @endcode
 */
typedef ae_sint128_t ae_s128_t;

/**
 * @typedef ae_u128_t
 * @brief Тип данных для беззнакового 128-битного целого числа.
 *
 * Этот тип определён, если компилятор поддерживает тип unsigned __int128.
 * Используется для представления беззнаковых целых чисел с 128 битами.
 *
 * Пример:
 * @code
 * ae_u128_t var = 12345678901234567890U;
 * @endcode
 */
typedef ae_uint128_t ae_u128_t;
#endif // __SIZEOF_INT128__

#endif // AE_NUMERIC_FIXED_TYPES_H
