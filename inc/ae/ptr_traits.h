/**
 * @file ptr_traits.h
 * @brief Заголовочный файл для работы с указателями и их преобразованиями.
 *
 * Этот файл содержит макросы для безопасной и удобной работы с указателями,
 * включая их преобразование, арифметику, проверку выравнивания и перекрытия
 * диапазонов указателей. Макросы помогают избежать распространенных ошибок,
 * связанных с манипуляциями с адресами в памяти.
 *
 * Основные макросы:
 * - ae_ptr_to: Преобразует указатель в указатель на другой тип.
 * - ae_ptr_to_addr: Преобразует указатель в адрес.
 * - ae_ptr_to_diff: Преобразует указатель в тип ae_ptrdiff_t.
 * - ae_ptr_diff: Вычисляет разницу между двумя указателями.
 * - ae_ptr_add_offset: Прибавляет смещение к указателю.
 * - ae_ptr_sub_offset: Вычитает смещение из указателя.
 * - ae_ptr_is_aligned: Проверяет выравнивание указателя по заданному значению.
 * - ae_ptr_range_is_aligned: Проверяет выравнивание двух указателей.
 * - ae_ptr_range_overlap_check: Проверяет перекрытие двух диапазонов указателей.
 *
 * @warning Пользователи должны быть осторожны при использовании макросов,
 *          так как неверные преобразования или операции с неинициализированными
 *          указателями могут привести к неопределенному поведению.
 */

#ifndef AE_PTR_TRAITS_H
#define AE_PTR_TRAITS_H

#include "nullptr.h"
#include "ptrdiff.h"
#include "addr_traits.h"
#include "static_cast.h"
#include "interval_traits.h"

/**
 * @def ae_ptr_cast
 * @brief Преобразует указатель одного типа в указатель другого типа.
 *
 * Этот макрос выполняет преобразование указателя одного типа в указатель
 * на другой тип. Он полезен при необходимости привести указатель к
 * другому типу, например, для работы с типами в низкоуровневых операциях
 * или для реализации обобщенных алгоритмов.
 *
 * @param T Тип, к которому следует привести указатель.
 * @param ptr Указатель, который необходимо преобразовать.
 *
 * @return Указатель на значение типа `T`,
 *         соответствующее исходному указателю.
 */
#define ae_ptr_cast(T, ptr) ae_static_cast(T *, ptr)

/**
 * @def ae_ptr_to_addr
 * @brief Преобразует указатель в адрес.
 *
 * Этот макрос является синонимом макроса `ae_addr_from_ptr`
 * и выполняет ту же операцию — преобразует указатель
 * в его числовое представление в виде адреса типа `ae_uaddr_t`.
 *
 * @param ptr Указатель, который необходимо преобразовать в адрес.
 * @return Адрес, соответствующий указанному указателю в виде
 *         значения типа `ae_uaddr_t`.
 *
 * @see ae_addr_from_ptr
 */
#define ae_ptr_to_addr(ptr) ae_addr_from_ptr(ptr)

/**
 * @def ae_ptr_to_diff
 * @brief Преобразует указатель в тип ae_ptrdiff_t.
 *
 * Этот макрос преобразует переданный указатель в тип ae_ptrdiff_t,
 * который обычно используется для хранения разницы между адресами памяти.
 *
 * @param ptr Указатель, который необходимо преобразовать.
 * @return Значение типа ae_ptrdiff_t, представляющее преобразованный указатель.
 */
#define ae_ptr_to_diff(ptr) ae_static_cast(ae_ptrdiff_t, ptr)

/**
 * @def ae_ptr_diff
 * @brief Вычисляет разницу между двумя указателями.
 *
 * Этот макрос принимает два указателя
 * и возвращает разницу между их адресами в виде целого числа.
 * Он позволяет определить, сколько байтов разделяет два указателя.
 *
 * @param ptr1 Первый указатель.
 * @param ptr2 Второй указатель.
 *
 * @return Разница между адресами `ptr1` и `ptr2` в байтах.
 */
#define ae_ptr_diff(ptr1, ptr2) (ae_ptr_to_diff(ptr1) - ae_ptr_to_diff(ptr2))

/**
 * @def ae_ptr_to_addr_diff
 * @brief Вычисляет разницу между двумя указателями в терминах адресов.
 *
 * Этот макрос вычисляет разницу между двумя указателями,
 * преобразуя их сначала в числовые представления адресов,
 * а затем вычитая одно значение из другого.
 *
 * @param ptr1 Первый указатель для вычитания.
 * @param ptr2 Второй указатель, который будет вычитаться из первого.
 * @return Разница между адресами, представленных двумя указателями,
 *         в виде числового значения типа `ae_uaddr_t`.
 *
 * @see ae_ptr_to_addr
 */
#define ae_ptr_to_addr_diff(ptr1, ptr2) ae_addr_diff(ae_ptr_to_addr(ptr1), ae_ptr_to_addr(ptr2))

/**
 * @def ae_ptr_add_offset_unsafe
 * @brief Прибавляет смещение к указателю без проверки на NULL.
 *
 * Этот макрос выполняет арифметику указателей, прибавляя целочисленное смещение
 * в байтах к адресу указателя, и возвращает новый указатель. Тип указателя задается
 * параметром `T`. Используется для операций с указателями, но не выполняет проверку на NULL.
 *
 * @param T Тип данных, на которые указывает указатель `ptr`.
 * @param ptr Указатель, к которому будет добавлено смещение.
 * @param offset Смещение в байтах, которое будет добавлено к указателю.
 *
 * @return Новый указатель, полученный после прибавления смещения к адресу указателя `ptr`.
 *         Используется без предварительной проверки на NULL, что может привести к ошибкам.
 */
#define ae_ptr_add_offset_unsafe(T, ptr, offset) ae_addr_to_ptr(T, (ae_ptr_to_addr(ptr) + offset))

/**
 * @def ae_ptr_add_unsafe
 * @brief Прибавляет смещение к указателю, преобразуя его в адрес, без проверки на NULL.
 *
 * Этот макрос выполняет арифметику указателей, прибавляя смещение в байтах к адресу указателя,
 * а затем преобразует результат обратно в указатель соответствующего типа.
 *
 * Макрос использует функцию `ae_ptr_to_addr` для преобразования указателя в его адрес,
 * а затем вызывает `ae_ptr_add_offset_unsafe` для выполнения арифметики указателя.
 *
 * @param T Тип данных, на которые указывает указатель `ptr1`.
 * @param ptr1 Указатель, к которому будет прибавлено смещение.
 * @param ptr2 Указатель, который преобразуется в адрес и используется для вычисления смещения.
 *
 * @return Новый указатель, полученный после прибавления смещения к адресу указателя `ptr1`.
 *         Важно: используется без предварительной проверки на NULL, что может привести к ошибкам.
 */
#define ae_ptr_add_unsafe(T, ptr1, ptr2) ae_ptr_add_offset_unsafe(T, ptr1, ae_ptr_to_addr(ptr2))

/**
 * @def ae_ptr_add_offset
 * @brief Прибавляет смещение к указателю с проверкой на NULL.
 *
 * Этот макрос проверяет, является ли указатель `ptr` ненулевым, и если это так,
 * прибавляет указанное смещение в байтах к адресу указателя. Тип указателя задается
 * параметром `T`. В случае, если указатель равен NULL, возвращает NULL, что предотвращает
 * доступ к памяти по нулевому указателю.
 *
 * @param T Тип данных, на которые указывает указатель `ptr`.
 * @param ptr Указатель, к которому будет добавлено смещение.
 * @param offset Смещение в байтах, которое будет добавлено к указателю.
 *
 * @return Новый указатель, полученный путем прибавления смещения к адресу указателя `ptr`.
 *         Если указатель `ptr` равен NULL, возвращается NULL.
 */
#define ae_ptr_add_offset(T, ptr, offset)                                                          \
    (ptr == nullptr ? nullptr : ae_ptr_add_offset_unsafe(T, ptr, offset))

/**
 * @def ae_ptr_add
 * @brief Прибавляет смещение к указателю,
 *        преобразуя второй указатель в адрес, с проверкой на NULL.
 *
 * Этот макрос проверяет, является ли указатель `ptr1` ненулевым, и если это так,
 * прибавляет смещение, которое вычисляется через преобразование указателя `ptr2`
 * в его адрес.
 *
 * Для выполнения операции используется макрос `ae_ptr_add_offset`,
 * который добавляет смещение к указателю, предварительно проверяя,
 * что указатель не равен NULL.
 *
 * @param T Тип данных, на которые указывает указатель `ptr1`.
 * @param ptr1 Указатель, к которому будет прибавлено смещение.
 * @param ptr2 Указатель, который преобразуется в адрес и используется для вычисления смещения.
 *
 * @return Новый указатель, полученный после прибавления смещения к адресу указателя `ptr1`.
 *         Если указатель `ptr1` равен NULL, возвращается NULL.
 */
#define ae_ptr_add(T, ptr1, ptr2) ae_ptr_add_offset(T, ptr1, ae_ptr_to_addr(ptr2))

/**
 * @def ae_ptr_sub_offset_unsafe
 * @brief Вычитает смещение из указателя без проверки на NULL.
 *
 * Этот макрос выполняет арифметику указателей, вычитая целочисленное смещение
 * в байтах из адреса указателя и возвращает новый указатель. Тип указателя задается
 * параметром `T`. Используется для операций с указателями, но не выполняет проверку на NULL.
 *
 * @param T Тип данных, на которые указывает указатель `ptr`.
 * @param ptr Указатель, из которого будет вычитаться смещение.
 * @param offset Смещение в байтах, которое будет вычтено из указателя.
 *
 * @return Новый указатель, полученный после вычитания смещения из адреса указателя `ptr`.
 *         Используется без предварительной проверки на NULL, что может привести к ошибкам.
 */
#define ae_ptr_sub_offset_unsafe(T, ptr, offset) ae_addr_to_ptr(T, (ae_ptr_to_addr(ptr) - offset))

/**
 * @def ae_ptr_sub_unsafe
 * @brief Вычитает смещение из указателя без проверки на NULL.
 *
 * Этот макрос выполняет арифметику указателей, вычитая целочисленное смещение
 * (которое вычисляется через преобразование указателя `ptr2` в его адрес)
 * из адреса указателя `ptr1`. .
 *
 * @param T Тип данных, на которые указывает указатель `ptr1`.
 * @param ptr1 Указатель, из которого будет вычтено смещение.
 * @param ptr2 Указатель, который преобразуется в адрес и используется для вычисления смещения.
 *
 * @return Новый указатель, полученный после вычитания смещения из адреса указателя `ptr1`.
 *         Важно: используется без предварительной проверки на NULL, что может привести к ошибкам.
 */
#define ae_ptr_sub_unsafe(T, ptr1, ptr2) ae_ptr_sub_offset_unsafe(T, ptr1, ae_ptr_to_addr(ptr2))

/**
 * @def ae_ptr_sub_offset
 * @brief Вычитает смещение из указателя с проверкой на NULL.
 *
 * Этот макрос проверяет, является ли указатель `ptr` ненулевым,
 * и если это так, вычитает указанное смещение в байтах из адреса указателя.
 *
 * @param T Тип данных, на которые указывает указатель `ptr`.
 * @param ptr Указатель, из которого будет вычитаться смещение.
 * @param offset Смещение в байтах, которое будет вычтено из указателя.
 *
 * @return Новый указатель, полученный путем вычитания смещения из адреса указателя `ptr`.
 *         Если указатель `ptr` равен NULL, возвращается NULL.
 */
#define ae_ptr_sub_offset(T, ptr, offset)                                                          \
    (ptr == nullptr ? nullptr : ae_ptr_sub_offset_unsafe(T, ptr, offset))

/**
 * @def ae_ptr_sub
 * @brief Вычитает смещение из указателя с проверкой на NULL.
 *
 * Этот макрос проверяет, является ли указатель `ptr1` ненулевым, и если это так,
 * вычитает смещение, которое вычисляется через преобразование указателя `ptr2` в его адрес,
 * из адреса указателя `ptr1`.
 *
 * @param T Тип данных, на которые указывает указатель `ptr1`.
 * @param ptr1 Указатель, из которого будет вычтено смещение.
 * @param ptr2 Указатель, который преобразуется в адрес и используется для вычисления смещения.
 *
 * @return Новый указатель, полученный после вычитания смещения из адреса указателя `ptr1`.
 *         Если указатель `ptr1` равен NULL, возвращается NULL.
 */
#define ae_ptr_sub(T, ptr1, ptr2) ae_ptr_sub_offset(T, ptr1, ae_ptr_to_addr(ptr2))

/**
 * @def ae_ptr_is_aligned
 * @brief Проверяет, выровнен ли указатель по заданному выравниванию.
 *
 * Этот макрос принимает указатель и значение выравнивания,
 * а затем проверяет, выровнен ли адрес, на который указывает
 * указатель, по указанному значению выравнивания.
 *
 * @param ptr Указатель, адрес которого необходимо проверить.
 * @param align Значение выравнивания, с которым нужно сравнить адрес.
 *
 * @return `true`, если адрес, на который указывает `ptr`,
 *         выровнен по `align`; `false` в противном случае.
 *
 * @note Делитель (выравнивание) не должен быть равен нулю,
 *       так как это приведет к неопределенному поведению.
 */
#define ae_ptr_is_aligned(ptr, align) ae_addr_is_aligned(ae_ptr_to_addr(ptr), align)

/**
 * @def ae_ptr_align_up
 * @brief Выравнивает указатель по заданному размеру типа.
 *
 * Этот макрос корректирует указатель `ptr` вверх (если необходимо),
 * чтобы он был выровнен по размеру указанного типа `type_size`.
 *
 * Он вычисляет необходимое смещение на основе разницы между указателем
 * и начальным указателем `begin`, выравнивая указатель
 * до следующего кратного значения `type_size`.
 *
 * @param T Тип указателя. Используется для выравнивания.
 * @param ptr Указатель, который нужно выровнять.
 * @param begin Начальный указатель, используемый для вычисления смещения.
 * @param type_size Размер типа, к которому нужно выровнять указатель.
 *
 * @return Выровненный указатель.
 */
#define ae_ptr_align_up(T, ptr, begin, type_size)                                                  \
    (ae_ptr_add_offset(T, ptr, (type_size - (ae_ptr_diff(ptr, begin) % type_size)) % type_size))

/**
 * @def ae_ptr_align_down
 * @brief Выравнивает указатель вниз по заданному размеру типа.
 *
 * Этот макрос корректирует указатель `ptr` вниз (если необходимо),
 * чтобы он был выровнен по размеру указанного типа `type_size`.
 *
 * Он вычисляет необходимое смещение на основе разницы между указателем
 * и начальным указателем `begin`, выравнивая указатель
 * до ближайшего меньшего кратного значения `type_size`.
 *
 * @param T Тип указателя. Используется для выравнивания.
 * @param ptr Указатель, который нужно выровнять.
 * @param begin Начальный указатель, используемый для вычисления смещения.
 * @param type_size Размер типа, к которому нужно выровнять указатель.
 *
 * @return Выровненный указатель.
 */
#define ae_ptr_align_down(T, ptr, begin, type_size)                                                \
    (ae_ptr_sub_offset(T, ptr, (ae_ptr_diff(ptr, begin) % type_size)))

#endif // AE_PTR_TRAITS_H
